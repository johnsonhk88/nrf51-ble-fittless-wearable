; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\app_gpiote.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\app_gpiote.d --feedback=.\obj\ak2_v1_1_0.fed --cpu=Cortex-M0 --apcs=interwork -O3 --diag_suppress=9931 -I..\Include -I..\user -I..\Include\app_common -I..\Include\ble -I..\Include\ble\ble_services -I..\Include\s110 -I..\Include\boards -I..\Include\sd_common -IC:\Johnson_project\2016_Project\BLE_Pedometer\Fittless_wearable\firmware_design\git-project\arm\RTE -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.6.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DNRF51 -DNRF51 -DDEBUG_NRF_USER -DSETUPA -DBOARD_AKII -DBLE_STACK_SUPPORT_REQD --omf_browse=.\obj\app_gpiote.crf ..\Source\app_common\app_gpiote.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  GPIOTE_IRQHandler PROC
;;;77      */
;;;78     void GPIOTE_IRQHandler(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;79     {
;;;80         uint8_t  i;
;;;81         uint32_t pins_state = NRF_GPIO->IN;
000002  4825              LDR      r0,|L1.152|
000004  6900              LDR      r0,[r0,#0x10]
;;;82         
;;;83         // Clear event.
;;;84         NRF_GPIOTE->EVENTS_PORT = 0;
000006  9000              STR      r0,[sp,#0]
000008  4924              LDR      r1,|L1.156|
00000a  2000              MOVS     r0,#0
00000c  63c8              STR      r0,[r1,#0x3c]
00000e  2503              MOVS     r5,#3
;;;85         
;;;86         // Check all users.
;;;87         for (i = 0; i < m_user_count; i++)
000010  4604              MOV      r4,r0
000012  042d              LSLS     r5,r5,#16
000014  e03a              B        |L1.140|
                  |L1.22|
;;;88         {
;;;89             gpiote_user_t * p_user = &mp_users[i];
000016  4621              MOV      r1,r4
000018  2214              MOVS     r2,#0x14
00001a  4351              MULS     r1,r2,r1
00001c  6842              LDR      r2,[r0,#4]  ; mp_users
;;;90     
;;;91             // Check if user is enabled.
;;;92             if (((1 << i) & m_enabled_users_mask) != 0)
00001e  6880              LDR      r0,[r0,#8]  ; m_enabled_users_mask
000020  188b              ADDS     r3,r1,r2              ;89
000022  2201              MOVS     r2,#1
000024  40a2              LSLS     r2,r2,r4
000026  4202              TST      r2,r0
000028  d02e              BEQ      |L1.136|
;;;93             {
;;;94                 uint32_t transition_pins;
;;;95                 uint32_t event_low_to_high;
;;;96                 uint32_t event_high_to_low;
;;;97     
;;;98                 // Find set of pins on which there has been a transition.
;;;99                 transition_pins = (pins_state ^ ~p_user->sense_high_pins) & p_user->pins_mask;
00002a  68d8              LDR      r0,[r3,#0xc]
00002c  43c2              MVNS     r2,r0
00002e  9800              LDR      r0,[sp,#0]
000030  4042              EORS     r2,r2,r0
000032  6818              LDR      r0,[r3,#0]
000034  4002              ANDS     r2,r2,r0
000036  2000              MOVS     r0,#0
                  |L1.56|
000038  2601              MOVS     r6,#1
00003a  4086              LSLS     r6,r6,r0
00003c  4232              TST      r2,r6
00003e  d012              BEQ      |L1.102|
000040  68df              LDR      r7,[r3,#0xc]
000042  4237              TST      r7,r6
000044  d103              BNE      |L1.78|
000046  2101              MOVS     r1,#1
000048  0449              LSLS     r1,r1,#17
00004a  4337              ORRS     r7,r7,r6
00004c  e001              B        |L1.82|
                  |L1.78|
00004e  4629              MOV      r1,r5
000050  43b7              BICS     r7,r7,r6
                  |L1.82|
000052  60df              STR      r7,[r3,#0xc]
000054  4e12              LDR      r6,|L1.160|
000056  0087              LSLS     r7,r0,#2
000058  19be              ADDS     r6,r7,r6
00005a  6837              LDR      r7,[r6,#0]
00005c  43af              BICS     r7,r7,r5
00005e  6037              STR      r7,[r6,#0]
000060  6837              LDR      r7,[r6,#0]
000062  430f              ORRS     r7,r7,r1
000064  6037              STR      r7,[r6,#0]
                  |L1.102|
000066  1c40              ADDS     r0,r0,#1
000068  2820              CMP      r0,#0x20
00006a  d3e5              BCC      |L1.56|
;;;100    
;;;101                // Toggle SENSE level for all pins that have changed state.
;;;102                sense_level_toggle(p_user, transition_pins);
;;;103                
;;;104                // Call user event handler if an event has occurred.
;;;105                event_high_to_low = (~pins_state & p_user->pins_high_to_low_mask) & transition_pins;
00006c  9800              LDR      r0,[sp,#0]
00006e  6899              LDR      r1,[r3,#8]
000070  4616              MOV      r6,r2
000072  4386              BICS     r6,r6,r0
000074  4031              ANDS     r1,r1,r6
;;;106                event_low_to_high = (pins_state & p_user->pins_low_to_high_mask) & transition_pins;
000076  9e00              LDR      r6,[sp,#0]
000078  6858              LDR      r0,[r3,#4]
00007a  4016              ANDS     r6,r6,r2
00007c  4030              ANDS     r0,r0,r6
00007e  4602              MOV      r2,r0
;;;107    
;;;108                if ((event_low_to_high | event_high_to_low) != 0)
000080  430a              ORRS     r2,r2,r1
000082  d001              BEQ      |L1.136|
;;;109                {
;;;110                    p_user->event_handler(event_low_to_high, event_high_to_low);
000084  691a              LDR      r2,[r3,#0x10]
000086  4790              BLX      r2
                  |L1.136|
000088  1c64              ADDS     r4,r4,#1
00008a  b2e4              UXTB     r4,r4                 ;87
                  |L1.140|
00008c  4805              LDR      r0,|L1.164|
00008e  7841              LDRB     r1,[r0,#1]            ;87  ; m_user_count
000090  428c              CMP      r4,r1                 ;87
000092  d3c0              BCC      |L1.22|
;;;111                }
;;;112            }
;;;113        }
;;;114    }
000094  bdf8              POP      {r3-r7,pc}
;;;115    
                          ENDP

000096  0000              DCW      0x0000
                  |L1.152|
                          DCD      0x50000500
                  |L1.156|
                          DCD      0x40006140
                  |L1.160|
                          DCD      0x50000700
                  |L1.164|
                          DCD      ||.data||

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  pins_sense_disable PROC
;;;77      */
;;;78     void GPIOTE_IRQHandler(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;79     {
;;;80         uint8_t  i;
;;;81         uint32_t pins_state = NRF_GPIO->IN;
000002  4a0c              LDR      r2,|L2.52|
000004  2100              MOVS     r1,#0
;;;82         
;;;83         // Clear event.
;;;84         NRF_GPIOTE->EVENTS_PORT = 0;
000006  6853              LDR      r3,[r2,#4]  ; mp_users
000008  2214              MOVS     r2,#0x14
00000a  4350              MULS     r0,r2,r0
00000c  2401              MOVS     r4,#1
00000e  4d0a              LDR      r5,|L2.56|
;;;85         
;;;86         // Check all users.
;;;87         for (i = 0; i < m_user_count; i++)
000010  2703              MOVS     r7,#3
000012  043f              LSLS     r7,r7,#16
                  |L2.20|
000014  581e              LDR      r6,[r3,r0]            ;79
;;;88         {
;;;89             gpiote_user_t * p_user = &mp_users[i];
000016  4622              MOV      r2,r4
000018  408a              LSLS     r2,r2,r1
00001a  4216              TST      r6,r2
00001c  d006              BEQ      |L2.44|
;;;90     
;;;91             // Check if user is enabled.
;;;92             if (((1 << i) & m_enabled_users_mask) != 0)
00001e  008a              LSLS     r2,r1,#2
000020  1952              ADDS     r2,r2,r5              ;89
000022  6816              LDR      r6,[r2,#0]
000024  43be              BICS     r6,r6,r7
000026  6016              STR      r6,[r2,#0]
000028  6816              LDR      r6,[r2,#0]
;;;93             {
;;;94                 uint32_t transition_pins;
;;;95                 uint32_t event_low_to_high;
;;;96                 uint32_t event_high_to_low;
;;;97     
;;;98                 // Find set of pins on which there has been a transition.
;;;99                 transition_pins = (pins_state ^ ~p_user->sense_high_pins) & p_user->pins_mask;
00002a  6016              STR      r6,[r2,#0]
                  |L2.44|
00002c  1c49              ADDS     r1,r1,#1
00002e  2920              CMP      r1,#0x20
000030  d3f0              BCC      |L2.20|
000032  bdf0              POP      {r4-r7,pc}
;;;100    
;;;101                // Toggle SENSE level for all pins that have changed state.
;;;102                sense_level_toggle(p_user, transition_pins);
;;;103                
;;;104                // Call user event handler if an event has occurred.
;;;105                event_high_to_low = (~pins_state & p_user->pins_high_to_low_mask) & transition_pins;
;;;106                event_low_to_high = (pins_state & p_user->pins_low_to_high_mask) & transition_pins;
;;;107    
;;;108                if ((event_low_to_high | event_high_to_low) != 0)
;;;109                {
;;;110                    p_user->event_handler(event_low_to_high, event_high_to_low);
;;;111                }
;;;112            }
;;;113        }
;;;114    }
;;;115    
                          ENDP

                  |L2.52|
                          DCD      ||.data||
                  |L2.56|
                          DCD      0x50000700

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  app_gpiote_init PROC
;;;77      */
;;;78     void GPIOTE_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;79     {
;;;80         uint8_t  i;
;;;81         uint32_t pins_state = NRF_GPIO->IN;
000002  2900              CMP      r1,#0
000004  d003              BEQ      |L3.14|
;;;82         
;;;83         // Clear event.
;;;84         NRF_GPIOTE->EVENTS_PORT = 0;
000006  078a              LSLS     r2,r1,#30
000008  2400              MOVS     r4,#0
00000a  2a00              CMP      r2,#0
00000c  d001              BEQ      |L3.18|
                  |L3.14|
00000e  2007              MOVS     r0,#7
;;;85         
;;;86         // Check all users.
;;;87         for (i = 0; i < m_user_count; i++)
000010  bd10              POP      {r4,pc}
                  |L3.18|
000012  4a0f              LDR      r2,|L3.80|
000014  460b              MOV      r3,r1                 ;79
;;;88         {
;;;89             gpiote_user_t * p_user = &mp_users[i];
000016  6051              STR      r1,[r2,#4]  ; mp_users
000018  7010              STRB     r0,[r2,#0]
00001a  2114              MOVS     r1,#0x14
00001c  7054              STRB     r4,[r2,#1]
;;;90     
;;;91             // Check if user is enabled.
;;;92             if (((1 << i) & m_enabled_users_mask) != 0)
00001e  4341              MULS     r1,r0,r1
000020  4618              MOV      r0,r3                 ;89
000022  6094              STR      r4,[r2,#8]  ; m_enabled_users_mask
000024  f7fffffe          BL       __aeabi_memclr4
000028  2000              MOVS     r0,#0
;;;93             {
;;;94                 uint32_t transition_pins;
;;;95                 uint32_t event_low_to_high;
;;;96                 uint32_t event_high_to_low;
;;;97     
;;;98                 // Find set of pins on which there has been a transition.
;;;99                 transition_pins = (pins_state ^ ~p_user->sense_high_pins) & p_user->pins_mask;
00002a  490a              LDR      r1,|L3.84|
00002c  43c0              MVNS     r0,r0
00002e  6088              STR      r0,[r1,#8]
000030  4809              LDR      r0,|L3.88|
000032  2140              MOVS     r1,#0x40
000034  6001              STR      r1,[r0,#0]
000036  4a09              LDR      r2,|L3.92|
000038  6810              LDR      r0,[r2,#0]
00003a  23ff              MOVS     r3,#0xff
00003c  041b              LSLS     r3,r3,#16
00003e  4398              BICS     r0,r0,r3
000040  040b              LSLS     r3,r1,#16
000042  4318              ORRS     r0,r0,r3
000044  6010              STR      r0,[r2,#0]
000046  4806              LDR      r0,|L3.96|
000048  6001              STR      r1,[r0,#0]
00004a  2000              MOVS     r0,#0
00004c  bd10              POP      {r4,pc}
;;;100    
;;;101                // Toggle SENSE level for all pins that have changed state.
;;;102                sense_level_toggle(p_user, transition_pins);
;;;103                
;;;104                // Call user event handler if an event has occurred.
;;;105                event_high_to_low = (~pins_state & p_user->pins_high_to_low_mask) & transition_pins;
;;;106                event_low_to_high = (pins_state & p_user->pins_low_to_high_mask) & transition_pins;
;;;107    
;;;108                if ((event_low_to_high | event_high_to_low) != 0)
;;;109                {
;;;110                    p_user->event_handler(event_low_to_high, event_high_to_low);
;;;111                }
;;;112            }
;;;113        }
;;;114    }
;;;115    
                          ENDP

00004e  0000              DCW      0x0000
                  |L3.80|
                          DCD      ||.data||
                  |L3.84|
                          DCD      0x40006300
                  |L3.88|
                          DCD      0xe000e280
                  |L3.92|
                          DCD      0xe000e404
                  |L3.96|
                          DCD      0xe000e100

                          AREA ||area_number.4||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.text||
                  app_gpiote_user_register PROC
;;;77      */
;;;78     void GPIOTE_IRQHandler(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;79     {
;;;80         uint8_t  i;
;;;81         uint32_t pins_state = NRF_GPIO->IN;
000002  4f11              LDR      r7,|L4.72|
000004  4684              MOV      r12,r0
;;;82         
;;;83         // Clear event.
;;;84         NRF_GPIOTE->EVENTS_PORT = 0;
000006  687d              LDR      r5,[r7,#4]  ; mp_users
000008  2d00              CMP      r5,#0
00000a  d007              BEQ      |L4.28|
00000c  2b00              CMP      r3,#0
00000e  d007              BEQ      |L4.32|
;;;85         
;;;86         // Check all users.
;;;87         for (i = 0; i < m_user_count; i++)
000010  7878              LDRB     r0,[r7,#1]  ; m_user_count
000012  783c              LDRB     r4,[r7,#0]  ; m_user_array_size
000014  42a0              CMP      r0,r4                 ;79
;;;88         {
;;;89             gpiote_user_t * p_user = &mp_users[i];
000016  d305              BCC      |L4.36|
000018  2004              MOVS     r0,#4
00001a  bdf8              POP      {r3-r7,pc}
                  |L4.28|
00001c  2008              MOVS     r0,#8
;;;90     
;;;91             // Check if user is enabled.
;;;92             if (((1 << i) & m_enabled_users_mask) != 0)
00001e  bdf8              POP      {r3-r7,pc}
                  |L4.32|
000020  2007              MOVS     r0,#7                 ;89
000022  bdf8              POP      {r3-r7,pc}
                  |L4.36|
000024  460e              MOV      r6,r1
000026  2414              MOVS     r4,#0x14
000028  4316              ORRS     r6,r6,r2
;;;93             {
;;;94                 uint32_t transition_pins;
;;;95                 uint32_t event_low_to_high;
;;;96                 uint32_t event_high_to_low;
;;;97     
;;;98                 // Find set of pins on which there has been a transition.
;;;99                 transition_pins = (pins_state ^ ~p_user->sense_high_pins) & p_user->pins_mask;
00002a  4344              MULS     r4,r0,r4
00002c  512e              STR      r6,[r5,r4]
00002e  1964              ADDS     r4,r4,r5
000030  6123              STR      r3,[r4,#0x10]
000032  60a2              STR      r2,[r4,#8]
000034  6061              STR      r1,[r4,#4]
000036  4661              MOV      r1,r12
000038  7008              STRB     r0,[r1,#0]
00003a  1c41              ADDS     r1,r0,#1
00003c  7079              STRB     r1,[r7,#1]
00003e  f7fffffe          BL       pins_sense_disable
000042  2000              MOVS     r0,#0
000044  bdf8              POP      {r3-r7,pc}
;;;100    
;;;101                // Toggle SENSE level for all pins that have changed state.
;;;102                sense_level_toggle(p_user, transition_pins);
;;;103                
;;;104                // Call user event handler if an event has occurred.
;;;105                event_high_to_low = (~pins_state & p_user->pins_high_to_low_mask) & transition_pins;
;;;106                event_low_to_high = (pins_state & p_user->pins_low_to_high_mask) & transition_pins;
;;;107    
;;;108                if ((event_low_to_high | event_high_to_low) != 0)
;;;109                {
;;;110                    p_user->event_handler(event_low_to_high, event_high_to_low);
;;;111                }
;;;112            }
;;;113        }
;;;114    }
;;;115    
                          ENDP

000046  0000              DCW      0x0000
                  |L4.72|
                          DCD      ||.data||

                          AREA ||area_number.5||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.text||
                  app_gpiote_user_enable PROC
;;;77      */
;;;78     void GPIOTE_IRQHandler(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;79     {
;;;80         uint8_t  i;
;;;81         uint32_t pins_state = NRF_GPIO->IN;
000002  4a1f              LDR      r2,|L5.128|
000004  6851              LDR      r1,[r2,#4]  ; mp_users
;;;82         
;;;83         // Clear event.
;;;84         NRF_GPIOTE->EVENTS_PORT = 0;
000006  2900              CMP      r1,#0
000008  d004              BEQ      |L5.20|
00000a  7853              LDRB     r3,[r2,#1]  ; m_user_count
00000c  4298              CMP      r0,r3
00000e  d303              BCC      |L5.24|
;;;85         
;;;86         // Check all users.
;;;87         for (i = 0; i < m_user_count; i++)
000010  2007              MOVS     r0,#7
000012  bdf0              POP      {r4-r7,pc}
                  |L5.20|
000014  2008              MOVS     r0,#8                 ;79
;;;88         {
;;;89             gpiote_user_t * p_user = &mp_users[i];
000016  bdf0              POP      {r4-r7,pc}
                  |L5.24|
000018  4b1a              LDR      r3,|L5.132|
00001a  2500              MOVS     r5,#0
00001c  63dd              STR      r5,[r3,#0x3c]
;;;90     
;;;91             // Check if user is enabled.
;;;92             if (((1 << i) & m_enabled_users_mask) != 0)
00001e  4b1a              LDR      r3,|L5.136|
000020  691c              LDR      r4,[r3,#0x10]         ;89
000022  6897              LDR      r7,[r2,#8]  ; m_enabled_users_mask
000024  2f00              CMP      r7,#0
000026  d102              BNE      |L5.46|
000028  4e18              LDR      r6,|L5.140|
;;;93             {
;;;94                 uint32_t transition_pins;
;;;95                 uint32_t event_low_to_high;
;;;96                 uint32_t event_high_to_low;
;;;97     
;;;98                 // Find set of pins on which there has been a transition.
;;;99                 transition_pins = (pins_state ^ ~p_user->sense_high_pins) & p_user->pins_mask;
00002a  05db              LSLS     r3,r3,#23
00002c  6073              STR      r3,[r6,#4]
                  |L5.46|
00002e  2601              MOVS     r6,#1
000030  4086              LSLS     r6,r6,r0
000032  433e              ORRS     r6,r6,r7
000034  6096              STR      r6,[r2,#8]  ; m_enabled_users_mask
000036  2214              MOVS     r2,#0x14
000038  4350              MULS     r0,r2,r0
00003a  1842              ADDS     r2,r0,r1
00003c  60d5              STR      r5,[r2,#0xc]
00003e  2200              MOVS     r2,#0
                  |L5.64|
000040  2301              MOVS     r3,#1
000042  580d              LDR      r5,[r1,r0]
000044  4093              LSLS     r3,r3,r2
000046  421d              TST      r5,r3
000048  d015              BEQ      |L5.118|
00004a  421c              TST      r4,r3
00004c  d002              BEQ      |L5.84|
00004e  2503              MOVS     r5,#3
000050  042d              LSLS     r5,r5,#16
000052  e005              B        |L5.96|
                  |L5.84|
000054  2501              MOVS     r5,#1
000056  046d              LSLS     r5,r5,#17
000058  1846              ADDS     r6,r0,r1
00005a  68f7              LDR      r7,[r6,#0xc]
00005c  431f              ORRS     r7,r7,r3
00005e  60f7              STR      r7,[r6,#0xc]
                  |L5.96|
000060  4b0b              LDR      r3,|L5.144|
000062  0096              LSLS     r6,r2,#2
000064  18f3              ADDS     r3,r6,r3
000066  681e              LDR      r6,[r3,#0]
000068  2703              MOVS     r7,#3
00006a  043f              LSLS     r7,r7,#16
;;;100    
;;;101                // Toggle SENSE level for all pins that have changed state.
;;;102                sense_level_toggle(p_user, transition_pins);
;;;103                
;;;104                // Call user event handler if an event has occurred.
;;;105                event_high_to_low = (~pins_state & p_user->pins_high_to_low_mask) & transition_pins;
00006c  43be              BICS     r6,r6,r7
00006e  601e              STR      r6,[r3,#0]
000070  681e              LDR      r6,[r3,#0]
000072  432e              ORRS     r6,r6,r5
000074  601e              STR      r6,[r3,#0]
                  |L5.118|
;;;106                event_low_to_high = (pins_state & p_user->pins_low_to_high_mask) & transition_pins;
000076  1c52              ADDS     r2,r2,#1
000078  2a20              CMP      r2,#0x20
00007a  d3e1              BCC      |L5.64|
00007c  2000              MOVS     r0,#0
00007e  bdf0              POP      {r4-r7,pc}
;;;107    
;;;108                if ((event_low_to_high | event_high_to_low) != 0)
;;;109                {
;;;110                    p_user->event_handler(event_low_to_high, event_high_to_low);
;;;111                }
;;;112            }
;;;113        }
;;;114    }
;;;115    
                          ENDP

                  |L5.128|
                          DCD      ||.data||
                  |L5.132|
                          DCD      0x40006140
                  |L5.136|
                          DCD      0x50000500
                  |L5.140|
                          DCD      0x40006300
                  |L5.144|
                          DCD      0x50000700

                          AREA ||area_number.6||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.text||
                  app_gpiote_user_disable PROC
;;;77      */
;;;78     void GPIOTE_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;79     {
;;;80         uint8_t  i;
;;;81         uint32_t pins_state = NRF_GPIO->IN;
000002  4c0d              LDR      r4,|L6.56|
000004  4605              MOV      r5,r0
;;;82         
;;;83         // Clear event.
;;;84         NRF_GPIOTE->EVENTS_PORT = 0;
000006  6860              LDR      r0,[r4,#4]  ; mp_users
000008  2800              CMP      r0,#0
00000a  d004              BEQ      |L6.22|
00000c  7860              LDRB     r0,[r4,#1]  ; m_user_count
00000e  4285              CMP      r5,r0
;;;85         
;;;86         // Check all users.
;;;87         for (i = 0; i < m_user_count; i++)
000010  d303              BCC      |L6.26|
000012  2007              MOVS     r0,#7
000014  bd70              POP      {r4-r6,pc}            ;79
                  |L6.22|
;;;88         {
;;;89             gpiote_user_t * p_user = &mp_users[i];
000016  2008              MOVS     r0,#8
000018  bd70              POP      {r4-r6,pc}
                  |L6.26|
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       pins_sense_disable
000020  2101              MOVS     r1,#1
;;;90     
;;;91             // Check if user is enabled.
;;;92             if (((1 << i) & m_enabled_users_mask) != 0)
000022  68a0              LDR      r0,[r4,#8]  ; m_enabled_users_mask
000024  40a9              LSLS     r1,r1,r5
000026  4388              BICS     r0,r0,r1
000028  60a0              STR      r0,[r4,#8]  ; m_enabled_users_mask
;;;93             {
;;;94                 uint32_t transition_pins;
;;;95                 uint32_t event_low_to_high;
;;;96                 uint32_t event_high_to_low;
;;;97     
;;;98                 // Find set of pins on which there has been a transition.
;;;99                 transition_pins = (pins_state ^ ~p_user->sense_high_pins) & p_user->pins_mask;
00002a  d103              BNE      |L6.52|
00002c  2001              MOVS     r0,#1
00002e  4903              LDR      r1,|L6.60|
000030  07c0              LSLS     r0,r0,#31
000032  6088              STR      r0,[r1,#8]
                  |L6.52|
000034  2000              MOVS     r0,#0
000036  bd70              POP      {r4-r6,pc}
;;;100    
;;;101                // Toggle SENSE level for all pins that have changed state.
;;;102                sense_level_toggle(p_user, transition_pins);
;;;103                
;;;104                // Call user event handler if an event has occurred.
;;;105                event_high_to_low = (~pins_state & p_user->pins_high_to_low_mask) & transition_pins;
;;;106                event_low_to_high = (pins_state & p_user->pins_low_to_high_mask) & transition_pins;
;;;107    
;;;108                if ((event_low_to_high | event_high_to_low) != 0)
;;;109                {
;;;110                    p_user->event_handler(event_low_to_high, event_high_to_low);
;;;111                }
;;;112            }
;;;113        }
;;;114    }
;;;115    
                          ENDP

                  |L6.56|
                          DCD      ||.data||
                  |L6.60|
                          DCD      0x40006300

                          AREA ||area_number.7||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.text||
                  app_gpiote_pins_state_get PROC
;;;77      */
;;;78     void GPIOTE_IRQHandler(void)
000000  4b0a              LDR      r3,|L7.44|
;;;79     {
;;;80         uint8_t  i;
;;;81         uint32_t pins_state = NRF_GPIO->IN;
000002  685a              LDR      r2,[r3,#4]  ; mp_users
000004  2a00              CMP      r2,#0
;;;82         
;;;83         // Clear event.
;;;84         NRF_GPIOTE->EVENTS_PORT = 0;
000006  d004              BEQ      |L7.18|
000008  785b              LDRB     r3,[r3,#1]  ; m_user_count
00000a  4298              CMP      r0,r3
00000c  d303              BCC      |L7.22|
00000e  2007              MOVS     r0,#7
;;;85         
;;;86         // Check all users.
;;;87         for (i = 0; i < m_user_count; i++)
000010  4770              BX       lr
                  |L7.18|
000012  2008              MOVS     r0,#8
000014  4770              BX       lr                    ;79
                  |L7.22|
;;;88         {
;;;89             gpiote_user_t * p_user = &mp_users[i];
000016  2314              MOVS     r3,#0x14
000018  4358              MULS     r0,r3,r0
00001a  1880              ADDS     r0,r0,r2
00001c  4a04              LDR      r2,|L7.48|
;;;90     
;;;91             // Check if user is enabled.
;;;92             if (((1 << i) & m_enabled_users_mask) != 0)
00001e  6912              LDR      r2,[r2,#0x10]
000020  6800              LDR      r0,[r0,#0]            ;89
000022  4002              ANDS     r2,r2,r0
000024  2000              MOVS     r0,#0
000026  600a              STR      r2,[r1,#0]
000028  4770              BX       lr
;;;93             {
;;;94                 uint32_t transition_pins;
;;;95                 uint32_t event_low_to_high;
;;;96                 uint32_t event_high_to_low;
;;;97     
;;;98                 // Find set of pins on which there has been a transition.
;;;99                 transition_pins = (pins_state ^ ~p_user->sense_high_pins) & p_user->pins_mask;
;;;100    
;;;101                // Toggle SENSE level for all pins that have changed state.
;;;102                sense_level_toggle(p_user, transition_pins);
;;;103                
;;;104                // Call user event handler if an event has occurred.
;;;105                event_high_to_low = (~pins_state & p_user->pins_high_to_low_mask) & transition_pins;
;;;106                event_low_to_high = (pins_state & p_user->pins_low_to_high_mask) & transition_pins;
;;;107    
;;;108                if ((event_low_to_high | event_high_to_low) != 0)
;;;109                {
;;;110                    p_user->event_handler(event_low_to_high, event_high_to_low);
;;;111                }
;;;112            }
;;;113        }
;;;114    }
;;;115    
                          ENDP

00002a  0000              DCW      0x0000
                  |L7.44|
                          DCD      ||.data||
                  |L7.48|
                          DCD      0x50000500

                          AREA ||.data||, DATA, ALIGN=2

                  m_user_array_size
000000  00                DCB      0x00
                  m_user_count
000001  000000            DCB      0x00,0x00,0x00
                  mp_users
                          DCD      0x00000000
                  m_enabled_users_mask
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\Source\\app_common\\app_gpiote.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_app_gpiote_c_3bb2fe7b____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___12_app_gpiote_c_3bb2fe7b____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_app_gpiote_c_3bb2fe7b____REVSH|
#line 144
|__asm___12_app_gpiote_c_3bb2fe7b____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
