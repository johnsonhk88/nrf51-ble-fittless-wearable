; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\main.d --feedback=.\obj\ak2_v1_1_0.fed --cpu=Cortex-M0 --apcs=interwork -O3 --diag_suppress=9931 -I..\Include -I..\user -I..\Include\app_common -I..\Include\ble -I..\Include\ble\ble_services -I..\Include\s110 -I..\Include\boards -I..\Include\sd_common -IC:\Johnson_project\2016_Project\BLE_Pedometer\Fittless_wearable\firmware_design\git-project\arm\RTE -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.6.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DNRF51 -DNRF51 -DDEBUG_NRF_USER -DSETUPA -DBOARD_AKII -DBLE_STACK_SUPPORT_REQD --omf_browse=.\obj\main.crf ..\user\main.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  app_error_handler PROC
;;;227     */
;;;228    void app_error_handler(uint32_t error_code, uint32_t line_num, const uint8_t * p_file_name)
000000  f3bf8f4f          DSB      
000004  4944              LDR      r1,|L1.280|
000006  4843              LDR      r0,|L1.276|
000008  60c8              STR      r0,[r1,#0xc]
00000a  f3bf8f4f          DSB      
                  |L1.14|
00000e  e7fe              B        |L1.14|
;;;229    {
;;;230        // This call can be used for debug purposes during application development.
;;;231        // @note CAUTION: Activating this code will write the stack to flash on an error.
;;;232        //                This function should NOT be used in a final product.
;;;233        //                It is intended STRICTLY for development/debugging purposes.
;;;234        //                The flash write will happen EVEN if the radio is active, thus interrupting
;;;235        //                any communication.
;;;236        //                Use with care. Un-comment the line below to use.
;;;237        // ble_debug_assert_handler(error_code, line_num, p_file_name);
;;;238    
;;;239        // On assert, the system can only recover with a reset.
;;;240        NVIC_SystemReset();
;;;241    }
;;;242    
                          ENDP

                  assert_nrf_callback PROC
;;;254     */
;;;255    void assert_nrf_callback(uint16_t line_num, const uint8_t * p_file_name)
000010  f3bf8f4f          DSB      
000014  4940              LDR      r1,|L1.280|
000016  483f              LDR      r0,|L1.276|
000018  60c8              STR      r0,[r1,#0xc]
00001a  f3bf8f4f          DSB      
                  |L1.30|
00001e  e7fe              B        |L1.30|
;;;256    {
;;;257        app_error_handler(DEAD_BEEF, line_num, p_file_name);
;;;258    }
;;;259    
                          ENDP

                  main PROC
;;;265    *************************************************************************** */
;;;266    int main(void)
000020  f7fffffe          BL       BLE_UART_Init
;;;267    {
;;;268    	uint32_t err_code;
;;;269    //uint8_t cr=0;	
;;;270    	
;;;271    
;;;272    	
;;;273    	
;;;274    #if BLE_Proxim
;;;275    	
;;;276    	  BLE_Primx_Apps_Int();
;;;277    	
;;;278    #elif  BLE_UART
;;;279    	
;;;280    	BLE_UART_Init();
;;;281    #else	
;;;282    	
;;;283    #if LED_Func		
;;;284    	LED_init();
;;;285    #endif	
;;;286    	
;;;287    #endif
;;;288    #if  Key0_Func
;;;289       Key0_init();
;;;290    #endif	
;;;291    #if  Key1_Func
;;;292    	 Key1_init();
;;;293    #endif	
;;;294    
;;;295    #if UART_Func
;;;296        UART_init();
000024  f7fffffe          BL       UART_init
;;;297    	
;;;298    #endif	
;;;299    
;;;300      
;;;301    	
;;;302    	
;;;303    	#if OLED096_Func
;;;304      OLED_Init();			//³õÊ¼»¯OLED      
000028  f7fffffe          BL       OLED_Init
;;;305     	OLED_ShowString(0,0, (uint8_t *)"Smart Band Demo");  
00002c  2100              MOVS     r1,#0
00002e  a23b              ADR      r2,|L1.284|
000030  4608              MOV      r0,r1
000032  f7fffffe          BL       OLED_ShowString
;;;306     	//OLED_ShowString(0,16, (uint8_t *)"BLE nRF51822");  
;;;307    	//OLED_ShowString(0,16, (uint8_t *)"Ver:");
;;;308    	 //OLED_ShowString(72,16,  Firmware_Ver);
;;;309    	OLED_Refresh_Gram();	  // update the 
000036  f7fffffe          BL       OLED_Refresh_Gram
;;;310    
;;;311      #endif
;;;312    	printf("\n\rSmart Watch Testing!");
00003a  a03c              ADR      r0,|L1.300|
00003c  f7fffffe          BL       __2printf
;;;313    	#if RTC_Func
;;;314    	#if BLE_Proxim
;;;315    	rtc_config();
;;;316    	#elif BLE_UART
;;;317    	rtc_config();
000040  f7fffffe          BL       rtc_config
;;;318    	
;;;319    	#else
;;;320      RTC_Init();	
;;;321      lfclk_config();
;;;322      rtc_config();
;;;323      NRF_RTC0->TASKS_START = 1;
;;;324    	RTC_Con.Soft_RTC_Update=1;
;;;325    	RTC_Run();
;;;326    	#endif
;;;327    #endif
;;;328    #if OLED096_Func 
;;;329    OLED_ShowString(0,16, (uint8_t*)"BT:DIS");
000044  a23f              ADR      r2,|L1.324|
000046  2110              MOVS     r1,#0x10
000048  2000              MOVS     r0,#0
00004a  f7fffffe          BL       OLED_ShowString
;;;330    OLED_Refresh_Gram();						
00004e  f7fffffe          BL       OLED_Refresh_Gram
;;;331    #endif
;;;332    	
;;;333    #if 	Heart_Rate_Func
;;;334    	ADC_Heart_Rate_Init(ADC_Heart_RES, ADC_Heart_Input, 1);
000052  2201              MOVS     r2,#1
000054  2110              MOVS     r1,#0x10
000056  2002              MOVS     r0,#2
000058  f7fffffe          BL       ADC_Heart_Rate_Init
;;;335    	HRM_Run=1;
00005c  493b              LDR      r1,|L1.332|
00005e  2001              MOVS     r0,#1
000060  7008              STRB     r0,[r1,#0]
;;;336    #endif	
;;;337     Timer2_init();
000062  f7fffffe          BL       Timer2_init
;;;338    
;;;339    	while(true)
;;;340      {
;;;341    
;;;342    /*LED test function*/
;;;343    #if     0  //LED_Func		
;;;344       LED_Status_Out();
;;;345    #endif		
;;;346    
;;;347    #if UART_Func
;;;348       UART_Decode();  // Decode the 
;;;349    		//simple_uart_put((uint8_t)"Test");
;;;350    		// printf("\n\rFriwmare Version: ");
;;;351        // printf("%s\n\r",Firmware_Ver);
;;;352    		//printf("Tesing!\n\r"); 
;;;353    #endif		
;;;354    		
;;;355    #if 	Heart_Rate_Func
;;;356    #if 0	
;;;357      if((HRM_Run==1)&&(HRM_Update==1))
;;;358    	{	
;;;359    	 //	adc_start();
;;;360    		printf("ADC Heart Raw Data:%d\r\n",adc_result);
;;;361    		//HRM_Update=0;
;;;362      }	
;;;363    #endif	
;;;364    	if(QS==1)
000066  4c3a              LDR      r4,|L1.336|
                  |L1.104|
000068  f7fffffe          BL       UART_Decode
00006c  7820              LDRB     r0,[r4,#0]  ; QS
00006e  2801              CMP      r0,#1
000070  d14b              BNE      |L1.266|
;;;365    	{
;;;366    	 printf("BPM is %d BPM\n\r",BPM);	
000072  4d38              LDR      r5,|L1.340|
000074  6829              LDR      r1,[r5,#0]  ; BPM
000076  a038              ADR      r0,|L1.344|
000078  f7fffffe          BL       __2printf
;;;367    	 printf("IBI is %d ms\n\r", IBI);	
00007c  483a              LDR      r0,|L1.360|
00007e  6801              LDR      r1,[r0,#0]  ; IBI
000080  a03a              ADR      r0,|L1.364|
000082  f7fffffe          BL       __2printf
;;;368    	 printf("Peak ADC value is %d \n\r", P);
000086  483d              LDR      r0,|L1.380|
000088  6801              LDR      r1,[r0,#0]  ; P
00008a  a03d              ADR      r0,|L1.384|
00008c  f7fffffe          BL       __2printf
;;;369    	 printf("Throug ADC value is %d \n\r", T);
000090  4841              LDR      r0,|L1.408|
000092  6801              LDR      r1,[r0,#0]  ; T
000094  a041              ADR      r0,|L1.412|
000096  f7fffffe          BL       __2printf
;;;370    	 printf("Heart ADC Threshold is %d \n\r ",thresh);
00009a  4847              LDR      r0,|L1.440|
00009c  6801              LDR      r1,[r0,#0]  ; thresh
00009e  a047              ADR      r0,|L1.444|
0000a0  f7fffffe          BL       __2printf
;;;371    	 printf("Heart ADC Pulse amplitude is %d \n\r", Pulse_amp);	
0000a4  484d              LDR      r0,|L1.476|
0000a6  6801              LDR      r1,[r0,#0]  ; Pulse_amp
0000a8  a04d              ADR      r0,|L1.480|
0000aa  f7fffffe          BL       __2printf
;;;372    	 // display in OLED
;;;373    	 memset(temp_buffer, 0, 8); // clear temp buffer
0000ae  2108              MOVS     r1,#8
0000b0  4854              LDR      r0,|L1.516|
0000b2  f7fffffe          BL       __aeabi_memclr
;;;374    	 Convert_8bit_to_BCD_ASCII(temp_buffer, BPM);
0000b6  6828              LDR      r0,[r5,#0]  ; BPM
0000b8  b2c1              UXTB     r1,r0
0000ba  4852              LDR      r0,|L1.516|
0000bc  f7fffffe          BL       Convert_8bit_to_BCD_ASCII
;;;375    	 OLED_ShowString(72,16,temp_buffer);
0000c0  4a50              LDR      r2,|L1.516|
0000c2  2110              MOVS     r1,#0x10
0000c4  2048              MOVS     r0,#0x48
0000c6  f7fffffe          BL       OLED_ShowString
;;;376    	 OLED_ShowString(104,16,(uint8_t *)"bpm");	
0000ca  a24f              ADR      r2,|L1.520|
0000cc  2110              MOVS     r1,#0x10
0000ce  2068              MOVS     r0,#0x68
0000d0  f7fffffe          BL       OLED_ShowString
;;;377    	 OLED_Refresh_Gram();
0000d4  f7fffffe          BL       OLED_Refresh_Gram
;;;378    	 #if 	 BLE_UART
;;;379    		temp_buffer[3]=' ';
0000d8  484a              LDR      r0,|L1.516|
0000da  2120              MOVS     r1,#0x20
0000dc  70c1              STRB     r1,[r0,#3]
;;;380    		temp_buffer[4]='b';
0000de  2162              MOVS     r1,#0x62
0000e0  7101              STRB     r1,[r0,#4]
;;;381    		temp_buffer[5]='p';
0000e2  2170              MOVS     r1,#0x70
0000e4  7141              STRB     r1,[r0,#5]
;;;382    		temp_buffer[6]='m';
0000e6  216d              MOVS     r1,#0x6d
0000e8  7181              STRB     r1,[r0,#6]
;;;383    	 err_code = ble_nus_send_string(&m_nus, temp_buffer, 8 );      //ÉÏ´«Êý¾Ý
0000ea  4601              MOV      r1,r0
0000ec  2208              MOVS     r2,#8
0000ee  4847              LDR      r0,|L1.524|
0000f0  f7fffffe          BL       ble_nus_send_string
;;;384       if (err_code != NRF_ERROR_INVALID_STATE)
0000f4  2808              CMP      r0,#8
0000f6  d006              BEQ      |L1.262|
;;;385       {
;;;386       APP_ERROR_CHECK(err_code);
0000f8  2800              CMP      r0,#0
0000fa  d004              BEQ      |L1.262|
0000fc  21ff              MOVS     r1,#0xff
0000fe  a244              ADR      r2,|L1.528|
000100  3183              ADDS     r1,r1,#0x83
000102  f7fffffe          BL       app_error_handler
                  |L1.262|
;;;387       }
;;;388       
;;;389    	 
;;;390    	 #endif	
;;;391    		
;;;392       QS=0;
000106  2000              MOVS     r0,#0
000108  7020              STRB     r0,[r4,#0]
                  |L1.266|
;;;393    	}		
;;;394    #endif		
;;;395    		
;;;396    #if RTC_Func
;;;397    
;;;398    RTC_Run();
00010a  f7fffffe          BL       RTC_Run
;;;399    	
;;;400    #endif
;;;401    
;;;402    #if BLE_Proxim
;;;403    		// power_manage();
;;;404    #elif  BLE_UART
;;;405    	
;;;406    	power_manage();
00010e  f7fffffe          BL       power_manage
000112  e7a9              B        |L1.104|
;;;407    	
;;;408    	
;;;409    #endif		
;;;410    	
;;;411    	
;;;412    		//nrf_delay_ms(50);
;;;413      }
;;;414    }
;;;415    
                          ENDP

                  |L1.276|
                          DCD      0x05fa0004
                  |L1.280|
                          DCD      0xe000ed00
                  |L1.284|
00011c  536d6172          DCB      "Smart Band Demo",0
000120  74204261
000124  6e642044
000128  656d6f00
                  |L1.300|
00012c  0a0d536d          DCB      "\n\rSmart Watch Testing!",0
000130  61727420
000134  57617463
000138  68205465
00013c  7374696e
000140  672100  
000143  00                DCB      0
                  |L1.324|
000144  42543a44          DCB      "BT:DIS",0
000148  495300  
00014b  00                DCB      0
                  |L1.332|
                          DCD      HRM_Run
                  |L1.336|
                          DCD      ||QS||
                  |L1.340|
                          DCD      BPM
                  |L1.344|
000158  42504d20          DCB      "BPM is %d BPM\n\r",0
00015c  69732025
000160  64204250
000164  4d0a0d00
                  |L1.360|
                          DCD      IBI
                  |L1.364|
00016c  49424920          DCB      "IBI is %d ms\n\r",0
000170  69732025
000174  64206d73
000178  0a0d00  
00017b  00                DCB      0
                  |L1.380|
                          DCD      P
                  |L1.384|
000180  5065616b          DCB      "Peak ADC value is %d \n\r",0
000184  20414443
000188  2076616c
00018c  75652069
000190  73202564
000194  200a0d00
                  |L1.408|
                          DCD      T
                  |L1.412|
00019c  5468726f          DCB      "Throug ADC value is %d \n\r",0
0001a0  75672041
0001a4  44432076
0001a8  616c7565
0001ac  20697320
0001b0  2564200a
0001b4  0d00    
0001b6  00                DCB      0
0001b7  00                DCB      0
                  |L1.440|
                          DCD      thresh
                  |L1.444|
0001bc  48656172          DCB      "Heart ADC Threshold is %d \n\r ",0
0001c0  74204144
0001c4  43205468
0001c8  72657368
0001cc  6f6c6420
0001d0  69732025
0001d4  64200a0d
0001d8  2000    
0001da  00                DCB      0
0001db  00                DCB      0
                  |L1.476|
                          DCD      Pulse_amp
                  |L1.480|
0001e0  48656172          DCB      "Heart ADC Pulse amplitude is %d \n\r",0
0001e4  74204144
0001e8  43205075
0001ec  6c736520
0001f0  616d706c
0001f4  69747564
0001f8  65206973
0001fc  20256420
000200  0a0d00  
000203  00                DCB      0
                  |L1.516|
                          DCD      temp_buffer
                  |L1.520|
000208  62706d00          DCB      "bpm",0
                  |L1.524|
                          DCD      m_nus
                  |L1.528|
000210  2e2e5c75          DCB      "..\\user\\main.c",0
000214  7365725c
000218  6d61696e
00021c  2e6300  
00021f  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=0

                  Firmware_Ver
000000  56312e31          DCB      0x56,0x31,0x2e,0x31
000004  2e3000            DCB      0x2e,0x30,0x00

                          AREA ||area_number.5||, DATA, ALIGN=0

                          EXPORTAS ||area_number.5||, ||.data||
                  BLE_Chip_Ver
000000  763100            DCB      0x76,0x31,0x00

;*** Start embedded assembler ***

#line 1 "..\\user\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_113006bf____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_113006bf____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_113006bf____REVSH|
#line 144
|__asm___6_main_c_113006bf____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_113006bf__nrf_delay_us|
#line 8 "..\\Include\\nrf_delay.h"
|__asm___6_main_c_113006bf__nrf_delay_us| PROC
#line 9

loop
 SUBS R0, R0, #1
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 BNE loop
 BX LR
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
