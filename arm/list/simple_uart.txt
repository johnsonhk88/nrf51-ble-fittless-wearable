; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\simple_uart.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\simple_uart.d --feedback=.\obj\ak2_v1_1_0.fed --cpu=Cortex-M0 --apcs=interwork -O3 --diag_suppress=9931 -I..\Include -I..\user -I..\Include\app_common -I..\Include\ble -I..\Include\ble\ble_services -I..\Include\s110 -I..\Include\boards -I..\Include\sd_common -IC:\Johnson_project\2016_Project\BLE_Pedometer\Fittless_wearable\firmware_design\git-project\arm\RTE -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.6.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DNRF51 -DNRF51 -DDEBUG_NRF_USER -DSETUPA -DBOARD_AKII -DBLE_STACK_SUPPORT_REQD --omf_browse=.\obj\simple_uart.crf ..\Source\simple_uart\simple_uart.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  simple_uart_get PROC
;;;19     
;;;20     uint8_t simple_uart_get(void)
000000  4804              LDR      r0,|L1.20|
                  |L1.2|
;;;21     {
;;;22       while (NRF_UART0->EVENTS_RXDRDY != 1)
000002  6881              LDR      r1,[r0,#8]
000004  2901              CMP      r1,#1
000006  d1fc              BNE      |L1.2|
;;;23       {
;;;24         // Wait for RXD data to be received
;;;25       }
;;;26       
;;;27       NRF_UART0->EVENTS_RXDRDY = 0;
000008  2100              MOVS     r1,#0
00000a  6081              STR      r1,[r0,#8]
;;;28       return (uint8_t)NRF_UART0->RXD;
00000c  4802              LDR      r0,|L1.24|
00000e  6980              LDR      r0,[r0,#0x18]
000010  b2c0              UXTB     r0,r0
;;;29     }
000012  4770              BX       lr
;;;30     
                          ENDP

                  |L1.20|
                          DCD      0x40002100
                  |L1.24|
                          DCD      0x40002500

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  simple_uart_get_with_timeout PROC
;;;19     
;;;20     uint8_t simple_uart_get(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;21     {
;;;22       while (NRF_UART0->EVENTS_RXDRDY != 1)
000002  460f              MOV      r7,r1
000004  4604              MOV      r4,r0
000006  2501              MOVS     r5,#1
;;;23       {
;;;24         // Wait for RXD data to be received
;;;25       }
;;;26       
;;;27       NRF_UART0->EVENTS_RXDRDY = 0;
000008  4e0b              LDR      r6,|L2.56|
00000a  e007              B        |L2.28|
                  |L2.12|
;;;28       return (uint8_t)NRF_UART0->RXD;
00000c  4620              MOV      r0,r4
00000e  1e64              SUBS     r4,r4,#1
000010  2800              CMP      r0,#0
;;;29     }
000012  db0f              BLT      |L2.52|
000014  207d              MOVS     r0,#0x7d
000016  00c0              LSLS     r0,r0,#3
000018  f7fffffe          BL       __asm___13_simple_uart_c_5dda6715__nrf_delay_us
                  |L2.28|
00001c  68b0              LDR      r0,[r6,#8]
00001e  2801              CMP      r0,#1
000020  d1f4              BNE      |L2.12|
                  |L2.34|
000022  2c00              CMP      r4,#0
000024  db04              BLT      |L2.48|
000026  2000              MOVS     r0,#0
000028  60b0              STR      r0,[r6,#8]
00002a  4804              LDR      r0,|L2.60|
00002c  6980              LDR      r0,[r0,#0x18]
00002e  7038              STRB     r0,[r7,#0]
                  |L2.48|
000030  4628              MOV      r0,r5
000032  bdf8              POP      {r3-r7,pc}
                  |L2.52|
000034  2500              MOVS     r5,#0
000036  e7f4              B        |L2.34|
;;;30     
                          ENDP

                  |L2.56|
                          DCD      0x40002100
                  |L2.60|
                          DCD      0x40002500

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  simple_uart_put PROC
;;;19     
;;;20     uint8_t simple_uart_get(void)
000000  4916              LDR      r1,|L3.92|
;;;21     {
;;;22       while (NRF_UART0->EVENTS_RXDRDY != 1)
000002  61c8              STR      r0,[r1,#0x1c]
000004  4816              LDR      r0,|L3.96|
                  |L3.6|
000006  69c1              LDR      r1,[r0,#0x1c]
;;;23       {
;;;24         // Wait for RXD data to be received
;;;25       }
;;;26       
;;;27       NRF_UART0->EVENTS_RXDRDY = 0;
000008  2901              CMP      r1,#1
00000a  d1fc              BNE      |L3.6|
;;;28       return (uint8_t)NRF_UART0->RXD;
00000c  2100              MOVS     r1,#0
00000e  61c1              STR      r1,[r0,#0x1c]
000010  4770              BX       lr
;;;29     }
;;;30     
                          ENDP

                  simple_uart_config PROC
;;;19     
;;;20     uint8_t simple_uart_get(void)
;;;21     {
;;;22       while (NRF_UART0->EVENTS_RXDRDY != 1)
;;;23       {
;;;24         // Wait for RXD data to be received
;;;25       }
;;;26       
;;;27       NRF_UART0->EVENTS_RXDRDY = 0;
;;;28       return (uint8_t)NRF_UART0->RXD;
;;;29     }
000012  b5f0              PUSH     {r4-r7,lr}
000014  4d13              LDR      r5,|L3.100|
000016  2401              MOVS     r4,#1
000018  008e              LSLS     r6,r1,#2
00001a  1976              ADDS     r6,r6,r5
00001c  6034              STR      r4,[r6,#0]
00001e  2600              MOVS     r6,#0
000020  009f              LSLS     r7,r3,#2
000022  197f              ADDS     r7,r7,r5
000024  603e              STR      r6,[r7,#0]
000026  4f0d              LDR      r7,|L3.92|
000028  60f9              STR      r1,[r7,#0xc]
00002a  617b              STR      r3,[r7,#0x14]
00002c  9905              LDR      r1,[sp,#0x14]
00002e  2900              CMP      r1,#0
000030  d00a              BEQ      |L3.72|
000032  0081              LSLS     r1,r0,#2
000034  1949              ADDS     r1,r1,r5
000036  600c              STR      r4,[r1,#0]
000038  0091              LSLS     r1,r2,#2
00003a  1949              ADDS     r1,r1,r5
00003c  600e              STR      r6,[r1,#0]
00003e  613a              STR      r2,[r7,#0x10]
000040  60b8              STR      r0,[r7,#8]
000042  4806              LDR      r0,|L3.92|
000044  3040              ADDS     r0,r0,#0x40
000046  62c4              STR      r4,[r0,#0x2c]
                  |L3.72|
000048  4807              LDR      r0,|L3.104|
00004a  6278              STR      r0,[r7,#0x24]
00004c  2004              MOVS     r0,#4
00004e  6038              STR      r0,[r7,#0]
000050  4806              LDR      r0,|L3.108|
000052  6084              STR      r4,[r0,#8]
000054  6004              STR      r4,[r0,#0]
000056  4802              LDR      r0,|L3.96|
000058  6086              STR      r6,[r0,#8]
00005a  bdf0              POP      {r4-r7,pc}
;;;30     
                          ENDP

                  |L3.92|
                          DCD      0x40002500
                  |L3.96|
                          DCD      0x40002100
                  |L3.100|
                          DCD      0x50000700
                  |L3.104|
                          DCD      0x01d7e000
                  |L3.108|
                          DCD      0x40002000

                          AREA ||area_number.4||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.4||, ||.text||
                  simple_uart_putstring PROC
;;;19     
;;;20     uint8_t simple_uart_get(void)
000000  b500              PUSH     {lr}
;;;21     {
;;;22       while (NRF_UART0->EVENTS_RXDRDY != 1)
000002  4603              MOV      r3,r0
000004  7800              LDRB     r0,[r0,#0]
000006  2201              MOVS     r2,#1
;;;23       {
;;;24         // Wait for RXD data to be received
;;;25       }
;;;26       
;;;27       NRF_UART0->EVENTS_RXDRDY = 0;
000008  e003              B        |L4.18|
                  |L4.10|
00000a  f7fffffe          BL       simple_uart_put
;;;28       return (uint8_t)NRF_UART0->RXD;
00000e  5c98              LDRB     r0,[r3,r2]
000010  1c52              ADDS     r2,r2,#1
                  |L4.18|
;;;29     }
000012  2800              CMP      r0,#0
000014  d1f9              BNE      |L4.10|
000016  bd00              POP      {pc}
;;;30     
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\Source\\simple_uart\\simple_uart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_simple_uart_c_5dda6715____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_simple_uart_c_5dda6715____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_simple_uart_c_5dda6715____REVSH|
#line 144
|__asm___13_simple_uart_c_5dda6715____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___13_simple_uart_c_5dda6715__nrf_delay_us|
#line 8 "..\\Include\\nrf_delay.h"
|__asm___13_simple_uart_c_5dda6715__nrf_delay_us| PROC
#line 9

loop
 SUBS R0, R0, #1
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 BNE loop
 BX LR
	ENDP

;*** End   embedded assembler ***
