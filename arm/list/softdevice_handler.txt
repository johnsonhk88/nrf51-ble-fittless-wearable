; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\softdevice_handler.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\softdevice_handler.d --feedback=.\obj\ak2_v1_1_0.fed --cpu=Cortex-M0 --apcs=interwork -O3 --diag_suppress=9931 -I..\Include -I..\user -I..\Include\app_common -I..\Include\ble -I..\Include\ble\ble_services -I..\Include\s110 -I..\Include\boards -I..\Include\sd_common -IC:\Johnson_project\2016_Project\BLE_Pedometer\Fittless_wearable\firmware_design\git-project\arm\RTE -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.6.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DNRF51 -DNRF51 -DDEBUG_NRF_USER -DSETUPA -DBOARD_AKII -DBLE_STACK_SUPPORT_REQD --omf_browse=.\obj\softdevice_handler.crf ..\Source\sd_common\softdevice_handler.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  softdevice_assertion_handler PROC
;;;62      */
;;;63     void softdevice_assertion_handler(uint32_t pc, uint16_t line_num, const uint8_t * file_name)
000000  b510              PUSH     {r4,lr}
;;;64     {
000002  4608              MOV      r0,r1
;;;65         UNUSED_PARAMETER(pc);
;;;66         assert_nrf_callback(line_num, file_name);
000004  4611              MOV      r1,r2
000006  f7fffffe          BL       assert_nrf_callback
;;;67     }
00000a  bd10              POP      {r4,pc}
;;;68     
                          ENDP

                  intern_softdevice_events_execute PROC
;;;69     
;;;70     void intern_softdevice_events_execute(void)
00000c  b5f8              PUSH     {r3-r7,lr}
;;;71     {
;;;72         if (!m_softdevice_enabled)
00000e  4c35              LDR      r4,|L1.228|
000010  7820              LDRB     r0,[r4,#0]  ; m_softdevice_enabled
000012  2800              CMP      r0,#0
000014  d037              BEQ      |L1.134|
;;;73         {
;;;74             // SoftDevice not enabled. This can be possible if the SoftDevice was enabled by the
;;;75             // application without using this module's API (i.e softdevice_handler_init)
;;;76     
;;;77             return;
;;;78         }
;;;79     
;;;80         bool no_more_soc_evts = (m_sys_evt_handler == NULL);
000016  6920              LDR      r0,[r4,#0x10]  ; m_sys_evt_handler
000018  2800              CMP      r0,#0
00001a  d007              BEQ      |L1.44|
00001c  2600              MOVS     r6,#0
                  |L1.30|
;;;81     #ifdef BLE_STACK_SUPPORT_REQD
;;;82         bool no_more_ble_evts = (m_ble_evt_handler == NULL);
00001e  68e0              LDR      r0,[r4,#0xc]  ; m_ble_evt_handler
000020  2800              CMP      r0,#0
000022  d005              BEQ      |L1.48|
000024  2500              MOVS     r5,#0
                  |L1.38|
;;;83     #endif
;;;84     #ifdef ANT_STACK_SUPPORT_REQD
;;;85         bool no_more_ant_evts = (m_ant_evt_handler == NULL);
;;;86     #endif
;;;87     
;;;88         for (;;)
;;;89         {
;;;90             uint32_t err_code;
;;;91     
;;;92             if (!no_more_soc_evts)
000026  2e00              CMP      r6,#0
000028  d004              BEQ      |L1.52|
00002a  e013              B        |L1.84|
                  |L1.44|
00002c  2601              MOVS     r6,#1                 ;80
00002e  e7f6              B        |L1.30|
                  |L1.48|
000030  2501              MOVS     r5,#1                 ;82
000032  e7f8              B        |L1.38|
                  |L1.52|
;;;93             {
;;;94                 uint32_t evt_id;
;;;95     
;;;96                 // Pull event from SOC.
;;;97                 err_code = sd_evt_get(&evt_id);
000034  4668              MOV      r0,sp
000036  df4e              SVC      #0x4e
;;;98                 
;;;99                 if (err_code == NRF_ERROR_NOT_FOUND)
000038  2805              CMP      r0,#5
00003a  d006              BEQ      |L1.74|
;;;100                {
;;;101                    no_more_soc_evts = true;
;;;102                }
;;;103                else if (err_code != NRF_SUCCESS)
00003c  2800              CMP      r0,#0
00003e  d006              BEQ      |L1.78|
;;;104                {
;;;105                    APP_ERROR_HANDLER(err_code);
000040  a229              ADR      r2,|L1.232|
000042  2169              MOVS     r1,#0x69
000044  f7fffffe          BL       app_error_handler
000048  e004              B        |L1.84|
                  |L1.74|
00004a  2601              MOVS     r6,#1                 ;101
00004c  e002              B        |L1.84|
                  |L1.78|
;;;106                }
;;;107                else
;;;108                {
;;;109                    // Call application's SOC event handler.
;;;110                    m_sys_evt_handler(evt_id);
00004e  6921              LDR      r1,[r4,#0x10]  ; m_sys_evt_handler
000050  9800              LDR      r0,[sp,#0]
000052  4788              BLX      r1
                  |L1.84|
;;;111                }
;;;112            }
;;;113    
;;;114    #ifdef BLE_STACK_SUPPORT_REQD
;;;115            // Fetch BLE Events.
;;;116            if (!no_more_ble_evts)
000054  2d00              CMP      r5,#0
000056  d112              BNE      |L1.126|
;;;117            {
;;;118                // Pull event from stack
;;;119                uint16_t evt_len = m_ble_evt_buffer_size;
000058  8860              LDRH     r0,[r4,#2]  ; m_ble_evt_buffer_size
00005a  4669              MOV      r1,sp
00005c  8008              STRH     r0,[r1,#0]
;;;120    
;;;121                err_code = sd_ble_evt_get(m_evt_buffer, &evt_len);
00005e  68a0              LDR      r0,[r4,#8]  ; m_evt_buffer
000060  df60              SVC      #0x60
;;;122                if (err_code == NRF_ERROR_NOT_FOUND)
000062  2805              CMP      r0,#5
000064  d006              BEQ      |L1.116|
;;;123                {
;;;124                    no_more_ble_evts = true;
;;;125                }
;;;126                else if (err_code != NRF_SUCCESS)
000066  2800              CMP      r0,#0
000068  d006              BEQ      |L1.120|
;;;127                {
;;;128                    APP_ERROR_HANDLER(err_code);
00006a  a21f              ADR      r2,|L1.232|
00006c  2180              MOVS     r1,#0x80
00006e  f7fffffe          BL       app_error_handler
000072  e004              B        |L1.126|
                  |L1.116|
000074  2501              MOVS     r5,#1                 ;124
000076  e002              B        |L1.126|
                  |L1.120|
;;;129                }
;;;130                else
;;;131                {
;;;132                    // Call application's BLE stack event handler.
;;;133                    m_ble_evt_handler((ble_evt_t *)m_evt_buffer);
000078  68e1              LDR      r1,[r4,#0xc]  ; m_ble_evt_handler
00007a  68a0              LDR      r0,[r4,#8]  ; m_evt_buffer
00007c  4788              BLX      r1
                  |L1.126|
;;;134                }
;;;135            }
;;;136    #endif
;;;137    
;;;138    #ifdef ANT_STACK_SUPPORT_REQD
;;;139            // Fetch ANT Events.
;;;140            if (!no_more_ant_evts)
;;;141            {
;;;142                // Pull event from stack
;;;143                err_code = sd_ant_event_get(&((ant_evt_t *)m_evt_buffer)->channel,
;;;144                                            &((ant_evt_t *)m_evt_buffer)->event,
;;;145                                            ((ant_evt_t *)m_evt_buffer)->evt_buffer);
;;;146                if (err_code == NRF_ERROR_NOT_FOUND)
;;;147                {
;;;148                    no_more_ant_evts = true;
;;;149                }
;;;150                else if (err_code != NRF_SUCCESS)
;;;151                {
;;;152                    APP_ERROR_HANDLER(err_code);
;;;153                }
;;;154                else
;;;155                {
;;;156                    // Call application's ANT stack event handler.
;;;157                    m_ant_evt_handler((ant_evt_t *)m_evt_buffer);
;;;158                }
;;;159            }
;;;160    #endif
;;;161    
;;;162            if (no_more_soc_evts)
00007e  2e00              CMP      r6,#0
000080  d0d8              BEQ      |L1.52|
;;;163            {
;;;164                // There are no remaining System (SOC) events to be fetched from the SoftDevice.
;;;165    #if defined(ANT_STACK_SUPPORT_REQD) && defined(BLE_STACK_SUPPORT_REQD)
;;;166                // Check if there are any remaining BLE and ANT events.
;;;167                if (no_more_ble_evts && no_more_ant_evts)
;;;168                {
;;;169                    break;
;;;170                }
;;;171    #elif defined(BLE_STACK_SUPPORT_REQD)
;;;172                // Check if there are any remaining BLE events.
;;;173                if (no_more_ble_evts)
000082  2d00              CMP      r5,#0
000084  d0cf              BEQ      |L1.38|
                  |L1.134|
;;;174                {
;;;175                    break;
;;;176                }
;;;177    #elif defined(ANT_STACK_SUPPORT_REQD)
;;;178                // Check if there are any remaining ANT events.
;;;179                if (no_more_ant_evts)
;;;180                {
;;;181                    break;
;;;182                }
;;;183    #else
;;;184                // No need to check for BLE or ANT events since there is no support for BLE and ANT
;;;185                // required.
;;;186                break;
;;;187    #endif
;;;188            }
;;;189        }
;;;190    }
000086  bdf8              POP      {r3-r7,pc}
;;;191    
                          ENDP

                  softdevice_handler_init PROC
;;;192    
;;;193    uint32_t softdevice_handler_init(nrf_clock_lfclksrc_t           clock_source,
000088  b570              PUSH     {r4-r6,lr}
;;;194                                     void *                         p_evt_buffer,
;;;195                                     uint16_t                       evt_buffer_size,
;;;196                                     softdevice_evt_schedule_func_t evt_schedule_func)
;;;197    {
;;;198        uint32_t err_code;
;;;199    
;;;200        // Save configuration.
;;;201    #if defined (BLE_STACK_SUPPORT_REQD) || defined (ANT_STACK_SUPPORT_REQD)
;;;202        // Check that buffer is not NULL.
;;;203        if (p_evt_buffer == NULL)
00008a  2900              CMP      r1,#0
00008c  d001              BEQ      |L1.146|
00008e  078c              LSLS     r4,r1,#30             ;197
000090  d001              BEQ      |L1.150|
                  |L1.146|
;;;204        {
;;;205            return NRF_ERROR_INVALID_PARAM;
;;;206        }
;;;207        
;;;208        // Check that buffer is correctly aligned.
;;;209        if (!is_word_aligned(p_evt_buffer))
;;;210        {
;;;211            return NRF_ERROR_INVALID_PARAM;
000092  2007              MOVS     r0,#7
                  |L1.148|
;;;212        }
;;;213    
;;;214        m_evt_buffer = (uint8_t *)p_evt_buffer;
;;;215    #else
;;;216        // The variable p_evt_buffer is not needed if neither BLE Stack nor ANT stack support is 
;;;217        // required.
;;;218        UNUSED_PARAMETER(p_evt_buffer);
;;;219    #endif
;;;220    
;;;221    #if defined (BLE_STACK_SUPPORT_REQD)     
;;;222        m_ble_evt_buffer_size = evt_buffer_size;
;;;223    #else
;;;224        // The variable evt_buffer_size is not needed if BLE Stack support is NOT required.
;;;225        UNUSED_PARAMETER(evt_buffer_size);
;;;226    #endif
;;;227        
;;;228        m_evt_schedule_func = evt_schedule_func;
;;;229    
;;;230        // Initialize SoftDevice.
;;;231        err_code = sd_softdevice_enable(clock_source, softdevice_assertion_handler);
;;;232        if (err_code != NRF_SUCCESS)
;;;233        {
;;;234            return err_code;
;;;235        }
;;;236    
;;;237        m_softdevice_enabled = true;
;;;238    
;;;239        // Enable BLE event interrupt (interrupt priority has already been set by the stack).
;;;240        return sd_nvic_EnableIRQ(SWI2_IRQn);
;;;241    }
000094  bd70              POP      {r4-r6,pc}
                  |L1.150|
000096  4c13              LDR      r4,|L1.228|
000098  2501              MOVS     r5,#1                 ;214
00009a  60a1              STR      r1,[r4,#8]            ;222  ; m_evt_buffer
00009c  8062              STRH     r2,[r4,#2]            ;222
00009e  491d              LDR      r1,|L1.276|
0000a0  6063              STR      r3,[r4,#4]            ;231  ; m_evt_schedule_func
0000a2  df10              SVC      #0x10                 ;231
0000a4  2800              CMP      r0,#0                 ;232
0000a6  d1f5              BNE      |L1.148|
0000a8  7025              STRB     r5,[r4,#0]            ;237
0000aa  2016              MOVS     r0,#0x16              ;240
0000ac  df23              SVC      #0x23                 ;240
0000ae  bd70              POP      {r4-r6,pc}
;;;242    
                          ENDP

                  softdevice_ble_evt_handler_set PROC
;;;254    #ifdef BLE_STACK_SUPPORT_REQD
;;;255    uint32_t softdevice_ble_evt_handler_set(ble_evt_handler_t ble_evt_handler)
0000b0  2800              CMP      r0,#0
;;;256    {
0000b2  d003              BEQ      |L1.188|
;;;257        if (ble_evt_handler == NULL)
;;;258        {
;;;259            return NRF_ERROR_NULL;
;;;260        }
;;;261    
;;;262        m_ble_evt_handler = ble_evt_handler;
0000b4  490b              LDR      r1,|L1.228|
;;;263    
;;;264        return NRF_SUCCESS;
0000b6  60c8              STR      r0,[r1,#0xc]  ; m_ble_evt_handler
0000b8  2000              MOVS     r0,#0
;;;265    }
0000ba  4770              BX       lr
                  |L1.188|
0000bc  200e              MOVS     r0,#0xe               ;259
0000be  4770              BX       lr
;;;266    #endif
                          ENDP

                  SWI2_IRQHandler PROC
;;;300     */
;;;301    void SWI2_IRQHandler(void)
0000c0  b510              PUSH     {r4,lr}
;;;302    {
;;;303        if (m_evt_schedule_func != NULL)
0000c2  4808              LDR      r0,|L1.228|
0000c4  6840              LDR      r0,[r0,#4]  ; m_evt_schedule_func
0000c6  2800              CMP      r0,#0
0000c8  d008              BEQ      |L1.220|
;;;304        {
;;;305            uint32_t err_code = m_evt_schedule_func();
0000ca  4780              BLX      r0
;;;306            APP_ERROR_CHECK(err_code);
0000cc  2800              CMP      r0,#0
0000ce  d004              BEQ      |L1.218|
0000d0  21ff              MOVS     r1,#0xff
0000d2  a205              ADR      r2,|L1.232|
0000d4  3133              ADDS     r1,r1,#0x33
0000d6  f7fffffe          BL       app_error_handler
                  |L1.218|
;;;307        }
;;;308        else
;;;309        {
;;;310            intern_softdevice_events_execute();
;;;311        }
;;;312    }
0000da  bd10              POP      {r4,pc}
                  |L1.220|
0000dc  f7fffffe          BL       intern_softdevice_events_execute
0000e0  bd10              POP      {r4,pc}
                          ENDP

0000e2  0000              DCW      0x0000
                  |L1.228|
                          DCD      ||.data||
                  |L1.232|
0000e8  2e2e5c53          DCB      "..\\Source\\sd_common\\softdevice_handler.c",0
0000ec  6f757263
0000f0  655c7364
0000f4  5f636f6d
0000f8  6d6f6e5c
0000fc  736f6674
000100  64657669
000104  63655f68
000108  616e646c
00010c  65722e63
000110  00      
000111  00                DCB      0
000112  00                DCB      0
000113  00                DCB      0
                  |L1.276|
                          DCD      softdevice_assertion_handler

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  softdevice_handler_sd_disable PROC
;;;62      */
;;;63     void softdevice_assertion_handler(uint32_t pc, uint16_t line_num, const uint8_t * file_name)
000000  df11              SVC      #0x11
;;;64     {
000002  2800              CMP      r0,#0
;;;65         UNUSED_PARAMETER(pc);
;;;66         assert_nrf_callback(line_num, file_name);
000004  d001              BEQ      |L2.10|
000006  2101              MOVS     r1,#1
000008  e000              B        |L2.12|
                  |L2.10|
;;;67     }
00000a  2100              MOVS     r1,#0
                  |L2.12|
00000c  4a01              LDR      r2,|L2.20|
00000e  7011              STRB     r1,[r2,#0]
000010  4770              BX       lr
;;;68     
                          ENDP

000012  0000              DCW      0x0000
                  |L2.20|
                          DCD      ||.data||

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  softdevice_sys_evt_handler_set PROC
;;;62      */
;;;63     void softdevice_assertion_handler(uint32_t pc, uint16_t line_num, const uint8_t * file_name)
000000  2800              CMP      r0,#0
;;;64     {
000002  d003              BEQ      |L3.12|
;;;65         UNUSED_PARAMETER(pc);
;;;66         assert_nrf_callback(line_num, file_name);
000004  4902              LDR      r1,|L3.16|
000006  6108              STR      r0,[r1,#0x10]  ; m_sys_evt_handler
000008  2000              MOVS     r0,#0
;;;67     }
00000a  4770              BX       lr
                  |L3.12|
00000c  200e              MOVS     r0,#0xe
00000e  4770              BX       lr
;;;68     
                          ENDP

                  |L3.16|
                          DCD      ||.data||

                          AREA ||.data||, DATA, ALIGN=2

                  m_softdevice_enabled
000000  0000              DCB      0x00,0x00
                  m_ble_evt_buffer_size
000002  0000              DCB      0x00,0x00
                  m_evt_schedule_func
                          DCD      0x00000000
                  m_evt_buffer
                          DCD      0x00000000
                  m_ble_evt_handler
                          DCD      0x00000000
                  m_sys_evt_handler
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\Source\\sd_common\\softdevice_handler.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_softdevice_handler_c_370b0038____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___20_softdevice_handler_c_370b0038____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_softdevice_handler_c_370b0038____REVSH|
#line 144
|__asm___20_softdevice_handler_c_370b0038____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
