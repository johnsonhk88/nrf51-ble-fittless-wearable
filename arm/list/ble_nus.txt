; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\ble_nus.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\ble_nus.d --feedback=.\obj\ak2_v1_1_0.fed --cpu=Cortex-M0 --apcs=interwork -O3 --diag_suppress=9931 -I..\Include -I..\user -I..\Include\app_common -I..\Include\ble -I..\Include\ble\ble_services -I..\Include\s110 -I..\Include\boards -I..\Include\sd_common -IC:\Johnson_project\2016_Project\BLE_Pedometer\Fittless_wearable\firmware_design\git-project\arm\RTE -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.6.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DNRF51 -DNRF51 -DDEBUG_NRF_USER -DSETUPA -DBOARD_AKII -DBLE_STACK_SUPPORT_REQD --omf_browse=.\obj\ble_nus.crf ..\user\ble_nus.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  rx_char_add PROC
;;;87      */
;;;88     static uint32_t rx_char_add(ble_nus_t * p_nus, const ble_nus_init_t * p_nus_init)
000000  b570              PUSH     {r4-r6,lr}
;;;89     {
;;;90         /**@snippet [Adding proprietary characteristic to S110 SoftDevice] */
;;;91         ble_gatts_char_md_t char_md;
;;;92         ble_gatts_attr_md_t cccd_md;
;;;93         ble_gatts_attr_t    attr_char_value;
;;;94         ble_uuid_t          ble_uuid;
;;;95         ble_gatts_attr_md_t attr_md;
;;;96         
;;;97         memset(&cccd_md, 0, sizeof(cccd_md));
000002  2400              MOVS     r4,#0
000004  4605              MOV      r5,r0                 ;89
;;;98     
;;;99         BLE_GAP_CONN_SEC_MODE_SET_OPEN(&cccd_md.read_perm);
000006  1c60              ADDS     r0,r4,#1
000008  b090              SUB      sp,sp,#0x40           ;89
00000a  0700              LSLS     r0,r0,#28
00000c  0f00              LSRS     r0,r0,#28
00000e  a908              ADD      r1,sp,#0x20
000010  3010              ADDS     r0,r0,#0x10
000012  9408              STR      r4,[sp,#0x20]
000014  7008              STRB     r0,[r1,#0]
000016  1c60              ADDS     r0,r4,#1
;;;100        BLE_GAP_CONN_SEC_MODE_SET_OPEN(&cccd_md.write_perm);
000018  0700              LSLS     r0,r0,#28
00001a  0f00              LSRS     r0,r0,#28
00001c  3010              ADDS     r0,r0,#0x10
00001e  7048              STRB     r0,[r1,#1]
;;;101    
;;;102        cccd_md.vloc = BLE_GATTS_VLOC_STACK;
000020  7888              LDRB     r0,[r1,#2]
000022  26f9              MOVS     r6,#0xf9
000024  4030              ANDS     r0,r0,r6
000026  1c80              ADDS     r0,r0,#2
000028  7088              STRB     r0,[r1,#2]
;;;103        
;;;104        memset(&char_md, 0, sizeof(char_md));
00002a  211c              MOVS     r1,#0x1c
00002c  a801              ADD      r0,sp,#4
00002e  f7fffffe          BL       __aeabi_memclr4
;;;105        
;;;106        char_md.char_props.notify = 1;
000032  4669              MOV      r1,sp
000034  7908              LDRB     r0,[r1,#4]
000036  2110              MOVS     r1,#0x10
000038  4308              ORRS     r0,r0,r1
00003a  4669              MOV      r1,sp
00003c  7108              STRB     r0,[r1,#4]
;;;107        char_md.p_char_user_desc  = NULL;
;;;108        char_md.p_char_pf         = NULL;
00003e  9402              STR      r4,[sp,#8]
;;;109        char_md.p_user_desc_md    = NULL;
;;;110        char_md.p_cccd_md         = &cccd_md;
000040  a808              ADD      r0,sp,#0x20
000042  9404              STR      r4,[sp,#0x10]         ;109
;;;111        char_md.p_sccd_md         = NULL;
000044  9405              STR      r4,[sp,#0x14]
;;;112        
;;;113        ble_uuid.type             = p_nus->uuid_type;
000046  9407              STR      r4,[sp,#0x1c]
000048  9006              STR      r0,[sp,#0x18]
00004a  7828              LDRB     r0,[r5,#0]
00004c  a908              ADD      r1,sp,#0x20
00004e  7188              STRB     r0,[r1,#6]
;;;114        ble_uuid.uuid             = BLE_UUID_NUS_RX_CHARACTERISTIC;
000050  2003              MOVS     r0,#3
000052  4669              MOV      r1,sp
000054  8488              STRH     r0,[r1,#0x24]
;;;115        
;;;116        memset(&attr_md, 0, sizeof(attr_md));
000056  2011              MOVS     r0,#0x11
;;;117    
;;;118        BLE_GAP_CONN_SEC_MODE_SET_OPEN(&attr_md.read_perm);
000058  9400              STR      r4,[sp,#0]
00005a  7008              STRB     r0,[r1,#0]
;;;119        BLE_GAP_CONN_SEC_MODE_SET_OPEN(&attr_md.write_perm);
00005c  7048              STRB     r0,[r1,#1]
;;;120        
;;;121        attr_md.vloc              = BLE_GATTS_VLOC_STACK;
00005e  7888              LDRB     r0,[r1,#2]
;;;122        attr_md.rd_auth           = 0;
000060  21f7              MOVS     r1,#0xf7
000062  4030              ANDS     r0,r0,r6              ;121
000064  1c80              ADDS     r0,r0,#2
000066  4008              ANDS     r0,r0,r1
;;;123        attr_md.wr_auth           = 0;
000068  21ef              MOVS     r1,#0xef
00006a  4008              ANDS     r0,r0,r1
;;;124        attr_md.vlen              = 1;
00006c  2601              MOVS     r6,#1
00006e  4330              ORRS     r0,r0,r6
000070  4669              MOV      r1,sp
000072  7088              STRB     r0,[r1,#2]
;;;125        
;;;126        memset(&attr_char_value, 0, sizeof(attr_char_value));
000074  2114              MOVS     r1,#0x14
000076  a80a              ADD      r0,sp,#0x28
000078  f7fffffe          BL       __aeabi_memclr4
;;;127    
;;;128        attr_char_value.p_uuid    = &ble_uuid;
00007c  a809              ADD      r0,sp,#0x24
;;;129        attr_char_value.p_attr_md = &attr_md;
00007e  900a              STR      r0,[sp,#0x28]
000080  4668              MOV      r0,sp
;;;130        attr_char_value.init_len  = sizeof(uint8_t);
000082  900b              STR      r0,[sp,#0x2c]
000084  4669              MOV      r1,sp
000086  860e              STRH     r6,[r1,#0x30]
;;;131        attr_char_value.init_offs = 0;
;;;132        attr_char_value.max_len   = BLE_NUS_MAX_RX_CHAR_LEN;
000088  2014              MOVS     r0,#0x14
00008a  864c              STRH     r4,[r1,#0x32]         ;131
00008c  8688              STRH     r0,[r1,#0x34]
;;;133        
;;;134        return sd_ble_gatts_characteristic_add(p_nus->service_handle,
00008e  462b              MOV      r3,r5
000090  8868              LDRH     r0,[r5,#2]
000092  330c              ADDS     r3,r3,#0xc
000094  aa0a              ADD      r2,sp,#0x28
000096  a901              ADD      r1,sp,#4
000098  dfa2              SVC      #0xa2
;;;135                                               &char_md,
;;;136                                               &attr_char_value,
;;;137                                               &p_nus->rx_handles);
;;;138        /**@snippet [Adding proprietary characteristic to S110 SoftDevice] */
;;;139    
;;;140    }
00009a  b010              ADD      sp,sp,#0x40
00009c  bd70              POP      {r4-r6,pc}
;;;141    
                          ENDP

                  ble_nus_on_ble_evt PROC
;;;194    
;;;195    void ble_nus_on_ble_evt(ble_nus_t * p_nus, ble_evt_t * p_ble_evt)
00009e  2800              CMP      r0,#0
;;;196    {
0000a0  d01e              BEQ      |L1.224|
;;;197        if ((p_nus == NULL) || (p_ble_evt == NULL))
0000a2  2900              CMP      r1,#0
0000a4  d01c              BEQ      |L1.224|
;;;198        {
;;;199            return;
;;;200        }
;;;201    
;;;202        switch (p_ble_evt->header.evt_id)
0000a6  880a              LDRH     r2,[r1,#0]
0000a8  2a10              CMP      r2,#0x10
0000aa  d014              BEQ      |L1.214|
0000ac  2a11              CMP      r2,#0x11
0000ae  d014              BEQ      |L1.218|
0000b0  2a50              CMP      r2,#0x50
0000b2  d115              BNE      |L1.224|
0000b4  88ca              LDRH     r2,[r1,#6]
0000b6  8a03              LDRH     r3,[r0,#0x10]
0000b8  1d89              ADDS     r1,r1,#6
0000ba  429a              CMP      r2,r3
0000bc  d102              BNE      |L1.196|
0000be  8b0b              LDRH     r3,[r1,#0x18]
0000c0  2b02              CMP      r3,#2
0000c2  d00e              BEQ      |L1.226|
                  |L1.196|
0000c4  8883              LDRH     r3,[r0,#4]
0000c6  429a              CMP      r2,r3
0000c8  d10a              BNE      |L1.224|
0000ca  6983              LDR      r3,[r0,#0x18]
0000cc  2b00              CMP      r3,#0
0000ce  d007              BEQ      |L1.224|
0000d0  8b0a              LDRH     r2,[r1,#0x18]
0000d2  311a              ADDS     r1,r1,#0x1a
0000d4  4718              BX       r3
                  |L1.214|
0000d6  8889              LDRH     r1,[r1,#4]
;;;203        {
;;;204            case BLE_GAP_EVT_CONNECTED:
;;;205                on_connect(p_nus, p_ble_evt);
;;;206                break;
0000d8  e001              B        |L1.222|
                  |L1.218|
0000da  2100              MOVS     r1,#0
0000dc  43c9              MVNS     r1,r1
                  |L1.222|
0000de  8281              STRH     r1,[r0,#0x14]
                  |L1.224|
;;;207    
;;;208            case BLE_GAP_EVT_DISCONNECTED:
;;;209                on_disconnect(p_nus, p_ble_evt);
;;;210                break;
;;;211    
;;;212            case BLE_GATTS_EVT_WRITE:
;;;213                on_write(p_nus, p_ble_evt);
;;;214                break;
;;;215    
;;;216            default:
;;;217                // No implementation needed.
;;;218                break;
;;;219        }
;;;220    }
0000e0  4770              BX       lr
                  |L1.226|
0000e2  7eca              LDRB     r2,[r1,#0x1b]
0000e4  7e8b              LDRB     r3,[r1,#0x1a]
0000e6  0211              LSLS     r1,r2,#8
0000e8  4319              ORRS     r1,r1,r3
0000ea  07c9              LSLS     r1,r1,#31
0000ec  0fc9              LSRS     r1,r1,#31
0000ee  d000              BEQ      |L1.242|
0000f0  2101              MOVS     r1,#1
                  |L1.242|
0000f2  7581              STRB     r1,[r0,#0x16]
0000f4  4770              BX       lr
;;;221    
                          ENDP

                  ble_nus_init PROC
;;;222    
;;;223    uint32_t ble_nus_init(ble_nus_t * p_nus, const ble_nus_init_t * p_nus_init)
0000f6  b530              PUSH     {r4,r5,lr}
;;;224    {
;;;225        uint32_t        err_code;
;;;226        ble_uuid_t      ble_uuid;
;;;227        ble_uuid128_t   nus_base_uuid = {0x9E, 0xCA, 0xDC, 0x24, 0x0E, 0xE5, 0xA9, 0xE0,
0000f8  4b4b              LDR      r3,|L1.552|
0000fa  460d              MOV      r5,r1                 ;224
0000fc  0004              MOVS     r4,r0                 ;224
0000fe  cb0f              LDM      r3,{r0-r3}
000100  b085              SUB      sp,sp,#0x14           ;224
000102  9303              STR      r3,[sp,#0xc]          ;224
000104  466b              MOV      r3,sp                 ;224
000106  c307              STM      r3!,{r0-r2}           ;224
000108  d024              BEQ      |L1.340|
;;;228                                         0x93, 0xF3, 0xA3, 0xB5, 0x00, 0x00, 0x40, 0x6E};
;;;229    
;;;230        if ((p_nus == NULL) || (p_nus_init == NULL))
00010a  2d00              CMP      r5,#0
00010c  d022              BEQ      |L1.340|
;;;231        {
;;;232            return NRF_ERROR_NULL;
;;;233        }
;;;234        
;;;235        // Initialize service structure.
;;;236        p_nus->conn_handle              = BLE_CONN_HANDLE_INVALID;
00010e  2000              MOVS     r0,#0
000110  43c0              MVNS     r0,r0
000112  82a0              STRH     r0,[r4,#0x14]
;;;237        p_nus->data_handler             = p_nus_init->data_handler;
000114  6828              LDR      r0,[r5,#0]
;;;238        p_nus->is_notification_enabled  = false;
000116  61a0              STR      r0,[r4,#0x18]
000118  2000              MOVS     r0,#0
00011a  75a0              STRB     r0,[r4,#0x16]
;;;239        
;;;240    
;;;241        /**@snippet [Adding proprietary Service to S110 SoftDevice] */
;;;242    
;;;243        // Add custom base UUID.
;;;244        err_code = sd_ble_uuid_vs_add(&nus_base_uuid, &p_nus->uuid_type);
00011c  4621              MOV      r1,r4
00011e  4668              MOV      r0,sp
000120  df62              SVC      #0x62
;;;245        if (err_code != NRF_SUCCESS)
000122  2800              CMP      r0,#0
000124  d114              BNE      |L1.336|
;;;246        {
;;;247            return err_code;
;;;248        }
;;;249    
;;;250        ble_uuid.type = p_nus->uuid_type;
000126  7821              LDRB     r1,[r4,#0]
000128  4668              MOV      r0,sp
00012a  7481              STRB     r1,[r0,#0x12]
;;;251        ble_uuid.uuid = BLE_UUID_NUS_SERVICE;
00012c  2101              MOVS     r1,#1
00012e  8201              STRH     r1,[r0,#0x10]
;;;252    
;;;253        // Add service.
;;;254        err_code = sd_ble_gatts_service_add(BLE_GATTS_SRVC_TYPE_PRIMARY,
000130  1ca2              ADDS     r2,r4,#2
000132  a904              ADD      r1,sp,#0x10
000134  2001              MOVS     r0,#1
000136  dfa0              SVC      #0xa0
;;;255                                            &ble_uuid,
;;;256                                            &p_nus->service_handle);
;;;257        /**@snippet [Adding proprietary Service to S110 SoftDevice] */
;;;258        if (err_code != NRF_SUCCESS)
000138  2800              CMP      r0,#0
00013a  d109              BNE      |L1.336|
;;;259        {
;;;260            return err_code;
;;;261        }
;;;262        
;;;263        // Add RX Characteristic.
;;;264        err_code = rx_char_add(p_nus, p_nus_init);
00013c  4629              MOV      r1,r5
00013e  4620              MOV      r0,r4
000140  f7fffffe          BL       rx_char_add
;;;265        if (err_code != NRF_SUCCESS)
000144  2800              CMP      r0,#0
000146  d103              BNE      |L1.336|
;;;266        {
;;;267            return err_code;
;;;268        }
;;;269    
;;;270        // Add TX Characteristic.
;;;271        err_code = tx_char_add(p_nus, p_nus_init);
000148  4629              MOV      r1,r5
00014a  4620              MOV      r0,r4
00014c  f7fffffe          BL       tx_char_add
                  |L1.336|
;;;272        if (err_code != NRF_SUCCESS)
;;;273        {
;;;274            return err_code;
;;;275        }
;;;276        
;;;277        return NRF_SUCCESS;
;;;278    }
000150  b005              ADD      sp,sp,#0x14
000152  bd30              POP      {r4,r5,pc}
                  |L1.340|
000154  200e              MOVS     r0,#0xe               ;232
000156  e7fb              B        |L1.336|
;;;279    
                          ENDP

                  ble_nus_send_string PROC
;;;280    
;;;281    uint32_t ble_nus_send_string(ble_nus_t * p_nus, uint8_t * string, uint16_t length)
000158  b507              PUSH     {r0-r2,lr}
;;;282    {
00015a  b084              SUB      sp,sp,#0x10
;;;283        ble_gatts_hvx_params_t hvx_params;
;;;284    
;;;285        if (p_nus == NULL)
00015c  2800              CMP      r0,#0
00015e  d00d              BEQ      |L1.380|
;;;286        {
;;;287            return NRF_ERROR_NULL;
;;;288        }
;;;289        
;;;290        if ((p_nus->conn_handle == BLE_CONN_HANDLE_INVALID) || (!p_nus->is_notification_enabled))
000160  8a82              LDRH     r2,[r0,#0x14]
000162  4b32              LDR      r3,|L1.556|
000164  429a              CMP      r2,r3
000166  d00b              BEQ      |L1.384|
000168  7d82              LDRB     r2,[r0,#0x16]
00016a  2a00              CMP      r2,#0
00016c  d008              BEQ      |L1.384|
;;;291        {
;;;292            return NRF_ERROR_INVALID_STATE;
;;;293        }
;;;294        
;;;295        if (length > BLE_NUS_MAX_DATA_LEN)
00016e  466a              MOV      r2,sp
000170  8b12              LDRH     r2,[r2,#0x18]
000172  2a14              CMP      r2,#0x14
000174  d906              BLS      |L1.388|
;;;296        {
;;;297            return NRF_ERROR_INVALID_PARAM;
000176  2007              MOVS     r0,#7
                  |L1.376|
;;;298        }
;;;299        
;;;300        memset(&hvx_params, 0, sizeof(hvx_params));
;;;301    
;;;302        hvx_params.handle = p_nus->rx_handles.value_handle;
;;;303        hvx_params.p_data = string;
;;;304        hvx_params.p_len  = &length;
;;;305        hvx_params.type   = BLE_GATT_HVX_NOTIFICATION;
;;;306        
;;;307        return sd_ble_gatts_hvx(p_nus->conn_handle, &hvx_params);
;;;308    }
000178  b007              ADD      sp,sp,#0x1c
00017a  bd00              POP      {pc}
                  |L1.380|
00017c  200e              MOVS     r0,#0xe               ;287
00017e  e7fb              B        |L1.376|
                  |L1.384|
000180  2008              MOVS     r0,#8                 ;292
000182  e7f9              B        |L1.376|
                  |L1.388|
000184  2200              MOVS     r2,#0                 ;300
000186  9200              STR      r2,[sp,#0]            ;300
000188  9201              STR      r2,[sp,#4]            ;300
00018a  9202              STR      r2,[sp,#8]            ;300
00018c  9203              STR      r2,[sp,#0xc]          ;302
00018e  8982              LDRH     r2,[r0,#0xc]          ;302
000190  466b              MOV      r3,sp                 ;302
000192  801a              STRH     r2,[r3,#0]            ;302
000194  9103              STR      r1,[sp,#0xc]          ;304
000196  a906              ADD      r1,sp,#0x18           ;304
000198  9102              STR      r1,[sp,#8]            ;305
00019a  2101              MOVS     r1,#1                 ;305
00019c  7099              STRB     r1,[r3,#2]            ;305
00019e  8a80              LDRH     r0,[r0,#0x14]         ;307
0001a0  4669              MOV      r1,sp                 ;307
0001a2  dfa6              SVC      #0xa6                 ;307
0001a4  e7e8              B        |L1.376|
                          ENDP

                  tx_char_add PROC
;;;149     */
;;;150    static uint32_t tx_char_add(ble_nus_t * p_nus, const ble_nus_init_t * p_nus_init)
0001a6  b570              PUSH     {r4-r6,lr}
;;;151    {
0001a8  b08e              SUB      sp,sp,#0x38
0001aa  4605              MOV      r5,r0
;;;152        ble_gatts_char_md_t char_md;
;;;153        ble_gatts_attr_t    attr_char_value;
;;;154        ble_uuid_t          ble_uuid;
;;;155        ble_gatts_attr_md_t attr_md;
;;;156        
;;;157        memset(&char_md, 0, sizeof(char_md));
0001ac  211c              MOVS     r1,#0x1c
0001ae  4668              MOV      r0,sp
0001b0  f7fffffe          BL       __aeabi_memclr4
;;;158        
;;;159        char_md.char_props.write            = 1;
0001b4  4669              MOV      r1,sp
0001b6  7808              LDRB     r0,[r1,#0]
0001b8  210c              MOVS     r1,#0xc
0001ba  4308              ORRS     r0,r0,r1
;;;160        char_md.char_props.write_wo_resp    = 1;
0001bc  4669              MOV      r1,sp
0001be  7008              STRB     r0,[r1,#0]
;;;161        char_md.p_char_user_desc            = NULL;
0001c0  2400              MOVS     r4,#0
;;;162        char_md.p_char_pf                   = NULL;
0001c2  9401              STR      r4,[sp,#4]
;;;163        char_md.p_user_desc_md              = NULL;
0001c4  9403              STR      r4,[sp,#0xc]
;;;164        char_md.p_cccd_md                   = NULL;
0001c6  9404              STR      r4,[sp,#0x10]
;;;165        char_md.p_sccd_md                   = NULL;
0001c8  9405              STR      r4,[sp,#0x14]
;;;166        
;;;167        ble_uuid.type                       = p_nus->uuid_type;
0001ca  9406              STR      r4,[sp,#0x18]
0001cc  7828              LDRB     r0,[r5,#0]
0001ce  a908              ADD      r1,sp,#0x20
0001d0  7088              STRB     r0,[r1,#2]
;;;168        ble_uuid.uuid                       = BLE_UUID_NUS_TX_CHARACTERISTIC;
0001d2  2002              MOVS     r0,#2
0001d4  4669              MOV      r1,sp
0001d6  8408              STRH     r0,[r1,#0x20]
;;;169        
;;;170        memset(&attr_md, 0, sizeof(attr_md));
0001d8  1c60              ADDS     r0,r4,#1
;;;171    
;;;172        BLE_GAP_CONN_SEC_MODE_SET_OPEN(&attr_md.read_perm);
0001da  0700              LSLS     r0,r0,#28
0001dc  0f00              LSRS     r0,r0,#28
0001de  3010              ADDS     r0,r0,#0x10
0001e0  9407              STR      r4,[sp,#0x1c]
0001e2  7708              STRB     r0,[r1,#0x1c]
0001e4  2011              MOVS     r0,#0x11
;;;173        BLE_GAP_CONN_SEC_MODE_SET_OPEN(&attr_md.write_perm);
0001e6  7748              STRB     r0,[r1,#0x1d]
;;;174        
;;;175        attr_md.vloc                        = BLE_GATTS_VLOC_STACK;
0001e8  7f88              LDRB     r0,[r1,#0x1e]
0001ea  21f9              MOVS     r1,#0xf9
0001ec  4008              ANDS     r0,r0,r1
;;;176        attr_md.rd_auth                     = 0;
0001ee  21f7              MOVS     r1,#0xf7
0001f0  1c80              ADDS     r0,r0,#2
0001f2  4008              ANDS     r0,r0,r1
;;;177        attr_md.wr_auth                     = 0;
0001f4  21ef              MOVS     r1,#0xef
0001f6  4008              ANDS     r0,r0,r1
;;;178        attr_md.vlen                        = 1;
0001f8  2601              MOVS     r6,#1
0001fa  4330              ORRS     r0,r0,r6
0001fc  4669              MOV      r1,sp
0001fe  7788              STRB     r0,[r1,#0x1e]
;;;179        
;;;180        memset(&attr_char_value, 0, sizeof(attr_char_value));
000200  2114              MOVS     r1,#0x14
000202  a809              ADD      r0,sp,#0x24
000204  f7fffffe          BL       __aeabi_memclr4
;;;181    
;;;182        attr_char_value.p_uuid              = &ble_uuid;
000208  a808              ADD      r0,sp,#0x20
;;;183        attr_char_value.p_attr_md           = &attr_md;
00020a  9009              STR      r0,[sp,#0x24]
00020c  a807              ADD      r0,sp,#0x1c
;;;184        attr_char_value.init_len            = 1;
00020e  900a              STR      r0,[sp,#0x28]
000210  4669              MOV      r1,sp
000212  858e              STRH     r6,[r1,#0x2c]
;;;185        attr_char_value.init_offs           = 0;
;;;186        attr_char_value.max_len             = BLE_NUS_MAX_TX_CHAR_LEN;
000214  2014              MOVS     r0,#0x14
000216  85cc              STRH     r4,[r1,#0x2e]         ;185
000218  8608              STRH     r0,[r1,#0x30]
;;;187        
;;;188        return sd_ble_gatts_characteristic_add(p_nus->service_handle,
00021a  8868              LDRH     r0,[r5,#2]
00021c  1d2b              ADDS     r3,r5,#4
00021e  aa09              ADD      r2,sp,#0x24
000220  dfa2              SVC      #0xa2
;;;189                                               &char_md,
;;;190                                               &attr_char_value,
;;;191                                               &p_nus->tx_handles);
;;;192    }
000222  b00e              ADD      sp,sp,#0x38
000224  bd70              POP      {r4-r6,pc}
;;;193    
                          ENDP

000226  0000              DCW      0x0000
                  |L1.552|
                          DCD      ||.constdata||
                  |L1.556|
                          DCD      0x0000ffff

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  9ecadc24          DCB      0x9e,0xca,0xdc,0x24
000004  0ee5a9e0          DCB      0x0e,0xe5,0xa9,0xe0
000008  93f3a3b5          DCB      0x93,0xf3,0xa3,0xb5
00000c  0000406e          DCB      0x00,0x00,0x40,0x6e

;*** Start embedded assembler ***

#line 1 "..\\user\\ble_nus.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_ble_nus_c_5b06b83c____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_ble_nus_c_5b06b83c____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_ble_nus_c_5b06b83c____REVSH|
#line 144
|__asm___9_ble_nus_c_5b06b83c____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
