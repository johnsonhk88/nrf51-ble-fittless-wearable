; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\rtc.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\rtc.d --feedback=.\obj\ak2_v1_1_0.fed --cpu=Cortex-M0 --apcs=interwork -O3 --diag_suppress=9931 -I..\Include -I..\user -I..\Include\app_common -I..\Include\ble -I..\Include\ble\ble_services -I..\Include\s110 -I..\Include\boards -I..\Include\sd_common -IC:\Johnson_project\2016_Project\BLE_Pedometer\Fittless_wearable\firmware_design\git-project\arm\RTE -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.6.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DNRF51 -DNRF51 -DDEBUG_NRF_USER -DSETUPA -DBOARD_AKII -DBLE_STACK_SUPPORT_REQD --omf_browse=.\obj\rtc.crf ..\user\rtc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  monthDay PROC
;;;266    
;;;267    unsigned char monthDay(unsigned char Month)
000000  b510              PUSH     {r4,lr}
;;;268    {
;;;269    	   switch(Month)
000002  0003              MOVS     r3,r0
000004  f7fffffe          BL       __ARM_common_switch8
000008  0d1f080a          DCB      0x0d,0x1f,0x08,0x0a
00000c  081f081f          DCB      0x08,0x1f,0x08,0x1f
000010  08081f08          DCB      0x08,0x08,0x1f,0x08
000014  1f081f00          DCB      0x1f,0x08,0x1f,0x00
;;;270    	{
;;;271    		case 1:
;;;272    		case 3:
;;;273        case 5:
;;;274        case 7:
;;;275        case 8:
;;;276        case 10:
;;;277        case 12:     return 31;
000018  201f              MOVS     r0,#0x1f
;;;278    
;;;279        case 4:
;;;280    		case 6:
;;;281        case 9:
;;;282        case 11:     return 30;
;;;283     
;;;284        case 2:  if(((RTC_Con.Year_Reg %4 ==0) &&(RTC_Con.Year_Reg %100!=0)) || (RTC_Con.Year_Reg %400== 0))
;;;285    		           {
;;;286                      return 29; // leap Year
;;;287                 			
;;;288    							 }
;;;289    		          else
;;;290    							{
;;;291    								return 28;
;;;292    							}	
;;;293    		
;;;294    		
;;;295    		
;;;296    		
;;;297    		
;;;298    	}
;;;299    	
;;;300    	return 30;
;;;301    	
;;;302    }	
00001a  bd10              POP      {r4,pc}
00001c  4c76              LDR      r4,|L1.504|
00001e  88e0              LDRH     r0,[r4,#6]            ;284  ; RTC_Con
000020  0780              LSLS     r0,r0,#30             ;284
000022  d105              BNE      |L1.48|
000024  88e0              LDRH     r0,[r4,#6]            ;284  ; RTC_Con
000026  2164              MOVS     r1,#0x64              ;284
000028  f7fffffe          BL       __aeabi_uidivmod
00002c  2900              CMP      r1,#0                 ;284
00002e  d108              BNE      |L1.66|
                  |L1.48|
000030  88e0              LDRH     r0,[r4,#6]            ;284  ; RTC_Con
000032  21ff              MOVS     r1,#0xff              ;284
000034  3191              ADDS     r1,r1,#0x91           ;284
000036  f7fffffe          BL       __aeabi_uidivmod
00003a  2900              CMP      r1,#0                 ;284
00003c  d001              BEQ      |L1.66|
00003e  201c              MOVS     r0,#0x1c              ;291
000040  bd10              POP      {r4,pc}
                  |L1.66|
000042  201d              MOVS     r0,#0x1d              ;286
000044  bd10              POP      {r4,pc}
000046  201e              MOVS     r0,#0x1e              ;300
000048  bd10              POP      {r4,pc}
;;;303    
                          ENDP

                  RTC_Update PROC
;;;233    
;;;234    void RTC_Update(void)
00004a  b510              PUSH     {r4,lr}
;;;235    {
;;;236    	unsigned char no_of_day=0;
;;;237    	no_of_day=monthDay(RTC_Con.Month_Reg); 
00004c  4c6a              LDR      r4,|L1.504|
00004e  7960              LDRB     r0,[r4,#5]  ; RTC_Con
000050  f7fffffe          BL       monthDay
;;;238    	if(++RTC_Con.Second_Reg>=One_Min)
000054  7861              LDRB     r1,[r4,#1]  ; RTC_Con
000056  1c49              ADDS     r1,r1,#1
000058  b2c9              UXTB     r1,r1
00005a  7061              STRB     r1,[r4,#1]
00005c  293c              CMP      r1,#0x3c
00005e  d321              BCC      |L1.164|
;;;239    	{
;;;240    		RTC_Con.Second_Reg=0;
000060  2100              MOVS     r1,#0
000062  7061              STRB     r1,[r4,#1]
;;;241    		if(++RTC_Con.Min_Reg>=One_Hour)
000064  78a2              LDRB     r2,[r4,#2]  ; RTC_Con
000066  1c52              ADDS     r2,r2,#1
000068  b2d2              UXTB     r2,r2
00006a  70a2              STRB     r2,[r4,#2]
00006c  2a3c              CMP      r2,#0x3c
00006e  d319              BCC      |L1.164|
;;;242    		{
;;;243    		  RTC_Con.Min_Reg=0;
000070  70a1              STRB     r1,[r4,#2]
;;;244    			if(++RTC_Con.Hour_Reg>=One_Day)
000072  78e2              LDRB     r2,[r4,#3]  ; RTC_Con
000074  1c52              ADDS     r2,r2,#1
000076  b2d2              UXTB     r2,r2
000078  70e2              STRB     r2,[r4,#3]
00007a  2a18              CMP      r2,#0x18
00007c  d312              BCC      |L1.164|
;;;245    			{
;;;246           RTC_Con.Hour_Reg=0;
00007e  70e1              STRB     r1,[r4,#3]
;;;247    			if(++RTC_Con.Day_Reg>=no_of_day)
000080  7921              LDRB     r1,[r4,#4]  ; RTC_Con
000082  1c49              ADDS     r1,r1,#1
000084  b2c9              UXTB     r1,r1
000086  7121              STRB     r1,[r4,#4]
000088  4281              CMP      r1,r0
00008a  d30b              BCC      |L1.164|
;;;248    			{
;;;249           RTC_Con.Day_Reg=1; // reset 
00008c  2001              MOVS     r0,#1
00008e  7120              STRB     r0,[r4,#4]
;;;250    			if(++RTC_Con.Month_Reg>=One_Year)
000090  7961              LDRB     r1,[r4,#5]  ; RTC_Con
000092  1c49              ADDS     r1,r1,#1
000094  b2c9              UXTB     r1,r1
000096  7161              STRB     r1,[r4,#5]
000098  290c              CMP      r1,#0xc
00009a  d303              BCC      |L1.164|
;;;251    			  {
;;;252             RTC_Con.Month_Reg=1;
00009c  7160              STRB     r0,[r4,#5]
;;;253    				 RTC_Con.Year_Reg++;
00009e  88e0              LDRH     r0,[r4,#6]  ; RTC_Con
0000a0  1c40              ADDS     r0,r0,#1
0000a2  80e0              STRH     r0,[r4,#6]
                  |L1.164|
;;;254    				
;;;255    			  }				
;;;256    				
;;;257    			}				
;;;258    				
;;;259    			}				
;;;260    		}	
;;;261    		
;;;262    	}	
;;;263    	
;;;264    }	
0000a4  bd10              POP      {r4,pc}
;;;265    
                          ENDP

                  rtc_timeout_handler PROC
;;;40     
;;;41     void rtc_timeout_handler(void * p_context)
0000a6  b510              PUSH     {r4,lr}
;;;42     {
;;;43     	 UNUSED_PARAMETER(p_context);
;;;44        RTC_Update();
0000a8  f7fffffe          BL       RTC_Update
;;;45     	 RTC_Con.Soft_RTC_Update=1;
0000ac  4852              LDR      r0,|L1.504|
0000ae  7801              LDRB     r1,[r0,#0]  ; RTC_Con
0000b0  2202              MOVS     r2,#2
0000b2  4311              ORRS     r1,r1,r2
0000b4  7001              STRB     r1,[r0,#0]
;;;46     
;;;47     
;;;48     
;;;49     }	
0000b6  bd10              POP      {r4,pc}
;;;50     
                          ENDP

                  RTC_Init PROC
;;;150    
;;;151    void RTC_Init(void)
0000b8  484f              LDR      r0,|L1.504|
;;;152    {
;;;153    	RTC_Con.Second_Reg=59;
0000ba  213b              MOVS     r1,#0x3b
0000bc  7041              STRB     r1,[r0,#1]
;;;154    	RTC_Con.Min_Reg=59;
0000be  7081              STRB     r1,[r0,#2]
;;;155    	RTC_Con.Hour_Reg=20;
0000c0  2114              MOVS     r1,#0x14
0000c2  70c1              STRB     r1,[r0,#3]
;;;156    	RTC_Con.Day_Reg=10;
0000c4  210a              MOVS     r1,#0xa
0000c6  7101              STRB     r1,[r0,#4]
;;;157    	RTC_Con.Month_Reg=5;
0000c8  2105              MOVS     r1,#5
0000ca  7141              STRB     r1,[r0,#5]
;;;158    	RTC_Con.Year_Reg=2016;
0000cc  213f              MOVS     r1,#0x3f
0000ce  0149              LSLS     r1,r1,#5
0000d0  80c1              STRH     r1,[r0,#6]
;;;159    	RTC_Con.Second_Cnt=0;
0000d2  2100              MOVS     r1,#0
0000d4  6081              STR      r1,[r0,#8]  ; RTC_Con
;;;160    	RTC_Con.Soft_RTC_Update=0;
0000d6  7801              LDRB     r1,[r0,#0]  ; RTC_Con
0000d8  22fd              MOVS     r2,#0xfd
0000da  4011              ANDS     r1,r1,r2
0000dc  7001              STRB     r1,[r0,#0]
;;;161    	RTC_Con.Soft_RTC_En=1;
0000de  7801              LDRB     r1,[r0,#0]  ; RTC_Con
0000e0  2201              MOVS     r2,#1
0000e2  4311              ORRS     r1,r1,r2
0000e4  7001              STRB     r1,[r0,#0]
;;;162    
;;;163    }	
0000e6  4770              BX       lr
;;;164    
                          ENDP

                  rtc_config PROC
;;;50     
;;;51     void rtc_config(void)
0000e8  b510              PUSH     {r4,lr}
;;;52     {
;;;53      uint32_t err_code;
;;;54      RTC_Init();	
0000ea  f7fffffe          BL       RTC_Init
;;;55      err_code = app_timer_start(m_rtc_update_timer_id, RTC_INTERVAL, NULL);
0000ee  4843              LDR      r0,|L1.508|
0000f0  2101              MOVS     r1,#1
0000f2  2200              MOVS     r2,#0
0000f4  03c9              LSLS     r1,r1,#15
0000f6  6800              LDR      r0,[r0,#0]  ; m_rtc_update_timer_id
0000f8  f7fffffe          BL       app_timer_start
;;;56      APP_ERROR_CHECK(err_code);
0000fc  2800              CMP      r0,#0
0000fe  d003              BEQ      |L1.264|
000100  a23f              ADR      r2,|L1.512|
000102  2138              MOVS     r1,#0x38
000104  f7fffffe          BL       app_error_handler
                  |L1.264|
;;;57     
;;;58     
;;;59     }	
000108  bd10              POP      {r4,pc}
;;;60     
                          ENDP

                  RTC_Run PROC
;;;164    
;;;165     void RTC_Run(void)
00010a  b5f8              PUSH     {r3-r7,lr}
;;;166     {
;;;167    	 
;;;168    	  if(RTC_Con.Soft_RTC_Update)
00010c  4c3a              LDR      r4,|L1.504|
00010e  7820              LDRB     r0,[r4,#0]  ; RTC_Con
000110  0780              LSLS     r0,r0,#30
000112  d570              BPL      |L1.502|
;;;169    		 {
;;;170          RTC_Con.Soft_RTC_Update=0;
000114  7820              LDRB     r0,[r4,#0]  ; RTC_Con
000116  21fd              MOVS     r1,#0xfd
000118  4008              ANDS     r0,r0,r1
00011a  7020              STRB     r0,[r4,#0]
;;;171       /*		
;;;172    			 UARTWrite("\n\rTime :", strlen("\n\rTime ")); 
;;;173    			Convert_16bit_to_BCD_ASCII(temp_buffer, RTC_Con.Year_Reg);
;;;174         	UARTWrite(temp_buffer+1, 4); 		 
;;;175          UARTWrite("/", strlen("/")); 
;;;176    			Convert_8bit_to_BCD_ASCII(temp_buffer, RTC_Con.Month_Reg);
;;;177         	UARTWrite(temp_buffer+1, 2); 		 
;;;178          UARTWrite("/", strlen("/")); 
;;;179    			Convert_8bit_to_BCD_ASCII(temp_buffer, RTC_Con.Day_Reg);
;;;180         	UARTWrite(temp_buffer+1, 2); 		 
;;;181          UARTWrite(" ", strlen(" "));  
;;;182    			Convert_8bit_to_BCD_ASCII(temp_buffer, RTC_Con.Hour_Reg);
;;;183         	UARTWrite(temp_buffer+1, 2); 		 
;;;184          UARTWrite(":", strlen(":")); 
;;;185    			Convert_8bit_to_BCD_ASCII(temp_buffer, RTC_Con.Min_Reg);
;;;186         	UARTWrite(temp_buffer+1, 2); 		 
;;;187          UARTWrite(":", strlen(":"));  
;;;188    			Convert_8bit_to_BCD_ASCII(temp_buffer, RTC_Con.Second_Reg);
;;;189         	UARTWrite(temp_buffer+1, 2); 		 
;;;190         // UARTWrite("", strlen(":"));  
;;;191    		*/	 
;;;192    		printf("\n\rDate :%d/%d/%d ", RTC_Con.Year_Reg, RTC_Con.Month_Reg,RTC_Con.Day_Reg);
00011c  7923              LDRB     r3,[r4,#4]  ; RTC_Con
00011e  7962              LDRB     r2,[r4,#5]  ; RTC_Con
000120  88e1              LDRH     r1,[r4,#6]  ; RTC_Con
000122  a03b              ADR      r0,|L1.528|
000124  f7fffffe          BL       __2printf
;;;193    		printf("%d:%d:%d", RTC_Con.Hour_Reg, RTC_Con.Min_Reg, RTC_Con.Second_Reg);
000128  7863              LDRB     r3,[r4,#1]  ; RTC_Con
00012a  78a2              LDRB     r2,[r4,#2]  ; RTC_Con
00012c  78e1              LDRB     r1,[r4,#3]  ; RTC_Con
00012e  a03d              ADR      r0,|L1.548|
000130  f7fffffe          BL       __2printf
;;;194    		printf("\n\rADC Heart Sample rate %d per second\n\r", ADC_Sample_Per_Sec);
000134  4e3e              LDR      r6,|L1.560|
000136  a03f              ADR      r0,|L1.564|
000138  6831              LDR      r1,[r6,#0]  ; ADC_Sample_Per_Sec
00013a  f7fffffe          BL       __2printf
;;;195         ADC_Sample_Per_Sec=0; // reset ADC sample rate		
00013e  2500              MOVS     r5,#0
;;;196    		 #if OLED096_Func
;;;197    		 memset(temp_buffer, 0, 8);
000140  4f2e              LDR      r7,|L1.508|
000142  6035              STR      r5,[r6,#0]  ; ADC_Sample_Per_Sec
000144  607d              STR      r5,[r7,#4]  ; temp_buffer
;;;198    		 Convert_16bit_to_BCD_ASCII(temp_buffer, RTC_Con.Year_Reg);
000146  60bd              STR      r5,[r7,#8]  ; temp_buffer
000148  88e1              LDRH     r1,[r4,#6]  ; RTC_Con
00014a  1d38              ADDS     r0,r7,#4
00014c  f7fffffe          BL       Convert_16bit_to_BCD_ASCII
;;;199    		 OLED_ShowString(0,32,temp_buffer+1);
000150  1d3e              ADDS     r6,r7,#4
000152  1c72              ADDS     r2,r6,#1
000154  2120              MOVS     r1,#0x20
000156  2000              MOVS     r0,#0
000158  f7fffffe          BL       OLED_ShowString
;;;200    		 OLED_ShowString(32,32,(uint8_t*)"/");
00015c  2120              MOVS     r1,#0x20
00015e  a23f              ADR      r2,|L1.604|
000160  4608              MOV      r0,r1
000162  f7fffffe          BL       OLED_ShowString
;;;201    		 memset(temp_buffer, 0, 8);
000166  607d              STR      r5,[r7,#4]  ; temp_buffer
;;;202    		 Convert_8bit_to_BCD_ASCII(temp_buffer, RTC_Con.Month_Reg);
000168  60bd              STR      r5,[r7,#8]  ; temp_buffer
00016a  7961              LDRB     r1,[r4,#5]  ; RTC_Con
00016c  4630              MOV      r0,r6
00016e  f7fffffe          BL       Convert_8bit_to_BCD_ASCII
;;;203    		 OLED_ShowString(40,32,temp_buffer+1);
000172  1c72              ADDS     r2,r6,#1
000174  2120              MOVS     r1,#0x20
000176  2028              MOVS     r0,#0x28
000178  f7fffffe          BL       OLED_ShowString
;;;204    		 OLED_ShowString(56,32,(uint8_t*)"/");
00017c  a237              ADR      r2,|L1.604|
00017e  2120              MOVS     r1,#0x20
000180  2038              MOVS     r0,#0x38
000182  f7fffffe          BL       OLED_ShowString
;;;205    		 memset(temp_buffer, 0, 8);
000186  607d              STR      r5,[r7,#4]  ; temp_buffer
;;;206    		 Convert_8bit_to_BCD_ASCII(temp_buffer, RTC_Con.Day_Reg);
000188  60bd              STR      r5,[r7,#8]  ; temp_buffer
00018a  7921              LDRB     r1,[r4,#4]  ; RTC_Con
00018c  4630              MOV      r0,r6
00018e  f7fffffe          BL       Convert_8bit_to_BCD_ASCII
;;;207    		 OLED_ShowString(64,32,temp_buffer+1);
000192  1c72              ADDS     r2,r6,#1
000194  2120              MOVS     r1,#0x20
000196  2040              MOVS     r0,#0x40
000198  f7fffffe          BL       OLED_ShowString
;;;208    		 //OLED_ShowString(80,32,(uint8_t*)"/");
;;;209    		 memset(temp_buffer, 0, 8);
00019c  607d              STR      r5,[r7,#4]  ; temp_buffer
;;;210    		 Convert_8bit_to_BCD_ASCII(temp_buffer, RTC_Con.Hour_Reg);
00019e  60bd              STR      r5,[r7,#8]  ; temp_buffer
0001a0  78e1              LDRB     r1,[r4,#3]  ; RTC_Con
0001a2  4630              MOV      r0,r6
0001a4  f7fffffe          BL       Convert_8bit_to_BCD_ASCII
;;;211    		 OLED_ShowString(0,48,temp_buffer+1);
0001a8  1c72              ADDS     r2,r6,#1
0001aa  2130              MOVS     r1,#0x30
0001ac  2000              MOVS     r0,#0
0001ae  f7fffffe          BL       OLED_ShowString
;;;212    		 OLED_ShowString(16,48,(uint8_t*)":");
0001b2  a22b              ADR      r2,|L1.608|
0001b4  2130              MOVS     r1,#0x30
0001b6  2010              MOVS     r0,#0x10
0001b8  f7fffffe          BL       OLED_ShowString
;;;213    		 memset(temp_buffer, 0, 8);
0001bc  607d              STR      r5,[r7,#4]  ; temp_buffer
;;;214    		 Convert_8bit_to_BCD_ASCII(temp_buffer, RTC_Con.Min_Reg);
0001be  60bd              STR      r5,[r7,#8]  ; temp_buffer
0001c0  78a1              LDRB     r1,[r4,#2]  ; RTC_Con
0001c2  4630              MOV      r0,r6
0001c4  f7fffffe          BL       Convert_8bit_to_BCD_ASCII
;;;215    		 OLED_ShowString(24,48,temp_buffer+1);
0001c8  1c72              ADDS     r2,r6,#1
0001ca  2130              MOVS     r1,#0x30
0001cc  2018              MOVS     r0,#0x18
0001ce  f7fffffe          BL       OLED_ShowString
;;;216    		 OLED_ShowString(40,48,(uint8_t*)":");
0001d2  a223              ADR      r2,|L1.608|
0001d4  2130              MOVS     r1,#0x30
0001d6  2028              MOVS     r0,#0x28
0001d8  f7fffffe          BL       OLED_ShowString
;;;217    		 memset(temp_buffer, 0, 8);
0001dc  607d              STR      r5,[r7,#4]  ; temp_buffer
;;;218    		  Convert_8bit_to_BCD_ASCII(temp_buffer, RTC_Con.Second_Reg);
0001de  60bd              STR      r5,[r7,#8]  ; temp_buffer
0001e0  7861              LDRB     r1,[r4,#1]  ; RTC_Con
0001e2  4630              MOV      r0,r6
0001e4  f7fffffe          BL       Convert_8bit_to_BCD_ASCII
;;;219    		 OLED_ShowString(48,48,temp_buffer+1);
0001e8  2130              MOVS     r1,#0x30
0001ea  1c72              ADDS     r2,r6,#1
0001ec  4608              MOV      r0,r1
0001ee  f7fffffe          BL       OLED_ShowString
;;;220    		// OLED_ShowString(32,48,(uint8_t*)":");
;;;221    		// memset(temp_buffer, 0, 8);
;;;222    		 
;;;223    		 
;;;224    		 OLED_Refresh_Gram();
0001f2  f7fffffe          BL       OLED_Refresh_Gram
                  |L1.502|
;;;225    		 #endif
;;;226    		
;;;227         }			 
;;;228    	 
;;;229    	 
;;;230     } 
0001f6  bdf8              POP      {r3-r7,pc}
;;;231    
                          ENDP

                  |L1.504|
                          DCD      ||.bss||
                  |L1.508|
                          DCD      ||.data||
                  |L1.512|
000200  2e2e5c75          DCB      "..\\user\\rtc.c",0
000204  7365725c
000208  7274632e
00020c  6300    
00020e  00                DCB      0
00020f  00                DCB      0
                  |L1.528|
000210  0a0d4461          DCB      "\n\rDate :%d/%d/%d ",0
000214  7465203a
000218  25642f25
00021c  642f2564
000220  2000    
000222  00                DCB      0
000223  00                DCB      0
                  |L1.548|
000224  25643a25          DCB      "%d:%d:%d",0
000228  643a2564
00022c  00      
00022d  00                DCB      0
00022e  00                DCB      0
00022f  00                DCB      0
                  |L1.560|
                          DCD      ADC_Sample_Per_Sec
                  |L1.564|
000234  0a0d4144          DCB      "\n\rADC Heart Sample rate %d per second\n\r",0
000238  43204865
00023c  61727420
000240  53616d70
000244  6c652072
000248  61746520
00024c  25642070
000250  65722073
000254  65636f6e
000258  640a0d00
                  |L1.604|
00025c  2f00              DCB      "/",0
00025e  00                DCB      0
00025f  00                DCB      0
                  |L1.608|
000260  3a00              DCB      ":",0
000262  00                DCB      0
000263  00                DCB      0

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  RTC_setSecond PROC
;;;266    
;;;267    unsigned char monthDay(unsigned char Month)
000000  4901              LDR      r1,|L2.8|
;;;268    {
;;;269    	   switch(Month)
000002  7048              STRB     r0,[r1,#1]
000004  4770              BX       lr
;;;270    	{
;;;271    		case 1:
;;;272    		case 3:
;;;273        case 5:
;;;274        case 7:
;;;275        case 8:
;;;276        case 10:
;;;277        case 12:     return 31;
;;;278    
;;;279        case 4:
;;;280    		case 6:
;;;281        case 9:
;;;282        case 11:     return 30;
;;;283     
;;;284        case 2:  if(((RTC_Con.Year_Reg %4 ==0) &&(RTC_Con.Year_Reg %100!=0)) || (RTC_Con.Year_Reg %400== 0))
;;;285    		           {
;;;286                      return 29; // leap Year
;;;287                 			
;;;288    							 }
;;;289    		          else
;;;290    							{
;;;291    								return 28;
;;;292    							}	
;;;293    		
;;;294    		
;;;295    		
;;;296    		
;;;297    		
;;;298    	}
;;;299    	
;;;300    	return 30;
;;;301    	
;;;302    }	
;;;303    
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      ||.bss||

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  RTC_setMin PROC
;;;266    
;;;267    unsigned char monthDay(unsigned char Month)
000000  4901              LDR      r1,|L3.8|
;;;268    {
;;;269    	   switch(Month)
000002  7088              STRB     r0,[r1,#2]
000004  4770              BX       lr
;;;270    	{
;;;271    		case 1:
;;;272    		case 3:
;;;273        case 5:
;;;274        case 7:
;;;275        case 8:
;;;276        case 10:
;;;277        case 12:     return 31;
;;;278    
;;;279        case 4:
;;;280    		case 6:
;;;281        case 9:
;;;282        case 11:     return 30;
;;;283     
;;;284        case 2:  if(((RTC_Con.Year_Reg %4 ==0) &&(RTC_Con.Year_Reg %100!=0)) || (RTC_Con.Year_Reg %400== 0))
;;;285    		           {
;;;286                      return 29; // leap Year
;;;287                 			
;;;288    							 }
;;;289    		          else
;;;290    							{
;;;291    								return 28;
;;;292    							}	
;;;293    		
;;;294    		
;;;295    		
;;;296    		
;;;297    		
;;;298    	}
;;;299    	
;;;300    	return 30;
;;;301    	
;;;302    }	
;;;303    
                          ENDP

000006  0000              DCW      0x0000
                  |L3.8|
                          DCD      ||.bss||

                          AREA ||area_number.4||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.text||
                  RTC_setHour PROC
;;;266    
;;;267    unsigned char monthDay(unsigned char Month)
000000  4901              LDR      r1,|L4.8|
;;;268    {
;;;269    	   switch(Month)
000002  70c8              STRB     r0,[r1,#3]
000004  4770              BX       lr
;;;270    	{
;;;271    		case 1:
;;;272    		case 3:
;;;273        case 5:
;;;274        case 7:
;;;275        case 8:
;;;276        case 10:
;;;277        case 12:     return 31;
;;;278    
;;;279        case 4:
;;;280    		case 6:
;;;281        case 9:
;;;282        case 11:     return 30;
;;;283     
;;;284        case 2:  if(((RTC_Con.Year_Reg %4 ==0) &&(RTC_Con.Year_Reg %100!=0)) || (RTC_Con.Year_Reg %400== 0))
;;;285    		           {
;;;286                      return 29; // leap Year
;;;287                 			
;;;288    							 }
;;;289    		          else
;;;290    							{
;;;291    								return 28;
;;;292    							}	
;;;293    		
;;;294    		
;;;295    		
;;;296    		
;;;297    		
;;;298    	}
;;;299    	
;;;300    	return 30;
;;;301    	
;;;302    }	
;;;303    
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      ||.bss||

                          AREA ||area_number.5||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.text||
                  RTC_setMonth PROC
;;;266    
;;;267    unsigned char monthDay(unsigned char Month)
000000  4901              LDR      r1,|L5.8|
;;;268    {
;;;269    	   switch(Month)
000002  7148              STRB     r0,[r1,#5]
000004  4770              BX       lr
;;;270    	{
;;;271    		case 1:
;;;272    		case 3:
;;;273        case 5:
;;;274        case 7:
;;;275        case 8:
;;;276        case 10:
;;;277        case 12:     return 31;
;;;278    
;;;279        case 4:
;;;280    		case 6:
;;;281        case 9:
;;;282        case 11:     return 30;
;;;283     
;;;284        case 2:  if(((RTC_Con.Year_Reg %4 ==0) &&(RTC_Con.Year_Reg %100!=0)) || (RTC_Con.Year_Reg %400== 0))
;;;285    		           {
;;;286                      return 29; // leap Year
;;;287                 			
;;;288    							 }
;;;289    		          else
;;;290    							{
;;;291    								return 28;
;;;292    							}	
;;;293    		
;;;294    		
;;;295    		
;;;296    		
;;;297    		
;;;298    	}
;;;299    	
;;;300    	return 30;
;;;301    	
;;;302    }	
;;;303    
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      ||.bss||

                          AREA ||area_number.6||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.text||
                  RTC_setDay PROC
;;;266    
;;;267    unsigned char monthDay(unsigned char Month)
000000  4901              LDR      r1,|L6.8|
;;;268    {
;;;269    	   switch(Month)
000002  7108              STRB     r0,[r1,#4]
000004  4770              BX       lr
;;;270    	{
;;;271    		case 1:
;;;272    		case 3:
;;;273        case 5:
;;;274        case 7:
;;;275        case 8:
;;;276        case 10:
;;;277        case 12:     return 31;
;;;278    
;;;279        case 4:
;;;280    		case 6:
;;;281        case 9:
;;;282        case 11:     return 30;
;;;283     
;;;284        case 2:  if(((RTC_Con.Year_Reg %4 ==0) &&(RTC_Con.Year_Reg %100!=0)) || (RTC_Con.Year_Reg %400== 0))
;;;285    		           {
;;;286                      return 29; // leap Year
;;;287                 			
;;;288    							 }
;;;289    		          else
;;;290    							{
;;;291    								return 28;
;;;292    							}	
;;;293    		
;;;294    		
;;;295    		
;;;296    		
;;;297    		
;;;298    	}
;;;299    	
;;;300    	return 30;
;;;301    	
;;;302    }	
;;;303    
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      ||.bss||

                          AREA ||area_number.7||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.text||
                  RTC_setYear PROC
;;;266    
;;;267    unsigned char monthDay(unsigned char Month)
000000  4901              LDR      r1,|L7.8|
;;;268    {
;;;269    	   switch(Month)
000002  80c8              STRH     r0,[r1,#6]
000004  4770              BX       lr
;;;270    	{
;;;271    		case 1:
;;;272    		case 3:
;;;273        case 5:
;;;274        case 7:
;;;275        case 8:
;;;276        case 10:
;;;277        case 12:     return 31;
;;;278    
;;;279        case 4:
;;;280    		case 6:
;;;281        case 9:
;;;282        case 11:     return 30;
;;;283     
;;;284        case 2:  if(((RTC_Con.Year_Reg %4 ==0) &&(RTC_Con.Year_Reg %100!=0)) || (RTC_Con.Year_Reg %400== 0))
;;;285    		           {
;;;286                      return 29; // leap Year
;;;287                 			
;;;288    							 }
;;;289    		          else
;;;290    							{
;;;291    								return 28;
;;;292    							}	
;;;293    		
;;;294    		
;;;295    		
;;;296    		
;;;297    		
;;;298    	}
;;;299    	
;;;300    	return 30;
;;;301    	
;;;302    }	
;;;303    
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  RTC_Con
                          %        12

                          AREA ||.data||, DATA, ALIGN=2

                  m_rtc_update_timer_id
                          DCD      0x00000000
                  temp_buffer
                          %        8

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L53.16|
00000e  461d              MOV      r5,r3
                  |L53.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\user\\rtc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_rtc_c_d905758e____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_rtc_c_d905758e____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_rtc_c_d905758e____REVSH|
#line 144
|__asm___5_rtc_c_d905758e____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___5_rtc_c_d905758e__nrf_delay_us|
#line 8 "..\\Include\\nrf_delay.h"
|__asm___5_rtc_c_d905758e__nrf_delay_us| PROC
#line 9

loop
 SUBS R0, R0, #1
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 BNE loop
 BX LR
	ENDP

;*** End   embedded assembler ***
