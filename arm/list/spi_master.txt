; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\spi_master.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\spi_master.d --feedback=.\obj\ak2_v1_1_0.fed --cpu=Cortex-M0 --apcs=interwork -O3 --diag_suppress=9931 -I..\Include -I..\user -I..\Include\app_common -I..\Include\ble -I..\Include\ble\ble_services -I..\Include\s110 -I..\Include\boards -I..\Include\sd_common -IC:\Johnson_project\2016_Project\BLE_Pedometer\Fittless_wearable\firmware_design\git-project\arm\RTE -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.6.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DNRF51 -DNRF51 -DDEBUG_NRF_USER -DSETUPA -DBOARD_AKII -DBLE_STACK_SUPPORT_REQD --omf_browse=.\obj\spi_master.crf ..\Source\spi_master\spi_master.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  spi_master_init PROC
;;;18     
;;;19     uint32_t* spi_master_init(SPIModuleNumber module_number, SPIMode mode, bool lsb_first)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;20     {
;;;21         uint32_t config_mode;
;;;22     
;;;23         NRF_SPI_Type *spi_base_address = (SPI0 == module_number)? NRF_SPI0 : (NRF_SPI_Type *)NRF_SPI1;
;;;24     
;;;25         if(SPI0 == module_number)
;;;26         {
;;;27             /* Configure GPIO pins used for pselsck, pselmosi, pselmiso and pselss for SPI0 */
;;;28             nrf_gpio_cfg_output(SPI_PSELSCK0);
;;;29             nrf_gpio_cfg_output(SPI_PSELMOSI0);
;;;30             nrf_gpio_cfg_input(SPI_PSELMISO0, NRF_GPIO_PIN_NOPULL);
;;;31             nrf_gpio_cfg_output(SPI_PSELSS0);
;;;32     
;;;33             /* Configure pins, frequency and mode */
;;;34             spi_base_address->PSELSCK  = SPI_PSELSCK0;
000002  2705              MOVS     r7,#5
000004  2600              MOVS     r6,#0                 ;20
000006  2401              MOVS     r4,#1                 ;20
000008  023f              LSLS     r7,r7,#8
00000a  2800              CMP      r0,#0                 ;23
00000c  d02e              BEQ      |L1.108|
00000e  4843              LDR      r0,|L1.284|
000010  4d41              LDR      r5,|L1.280|
000012  6004              STR      r4,[r0,#0]            ;23
000014  4841              LDR      r0,|L1.284|
000016  3820              SUBS     r0,r0,#0x20           ;23
000018  6004              STR      r4,[r0,#0]            ;23
00001a  4840              LDR      r0,|L1.284|
00001c  3818              SUBS     r0,r0,#0x18           ;23
00001e  6006              STR      r6,[r0,#0]            ;23
000020  483e              LDR      r0,|L1.284|
000022  1f00              SUBS     r0,r0,#4              ;23
000024  6004              STR      r4,[r0,#0]            ;23
;;;35             spi_base_address->PSELMOSI = SPI_PSELMOSI0;
;;;36             spi_base_address->PSELMISO = SPI_PSELMISO0;
;;;37             nrf_gpio_pin_set(SPI_PSELSS0); /* disable Set slave select (inactive high) */
;;;38         }
;;;39         else
;;;40         {
;;;41             /* Configure GPIO pins used for pselsck, pselmosi, pselmiso and pselss for SPI1*/
;;;42             nrf_gpio_cfg_output(SPI_PSELSCK1);
;;;43             nrf_gpio_cfg_output(SPI_PSELMOSI1);
;;;44             nrf_gpio_cfg_input(SPI_PSELMISO1, NRF_GPIO_PIN_NOPULL);
;;;45             nrf_gpio_cfg_output(SPI_PSELSS1);
;;;46     
;;;47             /* Configure pins, frequency and mode */
;;;48             spi_base_address->PSELSCK  = SPI_PSELSCK1;
000026  483e              LDR      r0,|L1.288|
000028  211d              MOVS     r1,#0x1d
00002a  6081              STR      r1,[r0,#8]
;;;49             spi_base_address->PSELMOSI = SPI_PSELMOSI1;
00002c  2115              MOVS     r1,#0x15
00002e  60c1              STR      r1,[r0,#0xc]
;;;50             spi_base_address->PSELMISO = SPI_PSELMISO1;
000030  2117              MOVS     r1,#0x17
000032  6101              STR      r1,[r0,#0x10]
;;;51             nrf_gpio_pin_set(SPI_PSELSS1);         /* disable Set slave select (inactive high) */
000034  201c              MOVS     r0,#0x1c
                  |L1.54|
000036  f7fffffe          BL       nrf_gpio_pin_set
;;;52         }
;;;53     
;;;54         spi_base_address->FREQUENCY = (uint32_t) SPI_OPERATING_FREQUENCY;
00003a  2101              MOVS     r1,#1
00003c  0709              LSLS     r1,r1,#28
00003e  19e8              ADDS     r0,r5,r7
000040  6241              STR      r1,[r0,#0x24]
;;;55     
;;;56         /*lint -e845 -save // A zero has been given as right argument to operator '!'" */
;;;57         /** @snippet [SPI Select mode] */
;;;58         switch (mode )
000042  9901              LDR      r1,[sp,#4]
000044  2900              CMP      r1,#0
000046  d006              BEQ      |L1.86|
000048  2901              CMP      r1,#1
00004a  d024              BEQ      |L1.150|
00004c  2902              CMP      r1,#2
00004e  d024              BEQ      |L1.154|
000050  2903              CMP      r1,#3
000052  d024              BEQ      |L1.158|
;;;59         {
;;;60            
;;;61             case SPI_MODE0:
;;;62                 config_mode = (SPI_CONFIG_CPHA_Leading << SPI_CONFIG_CPHA_Pos) | (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos);
;;;63                 break;
;;;64             case SPI_MODE1:
;;;65                 config_mode = (SPI_CONFIG_CPHA_Trailing << SPI_CONFIG_CPHA_Pos) | (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos);
;;;66                 break;
;;;67             case SPI_MODE2:
;;;68                 config_mode = (SPI_CONFIG_CPHA_Leading << SPI_CONFIG_CPHA_Pos) | (SPI_CONFIG_CPOL_ActiveLow << SPI_CONFIG_CPOL_Pos);
;;;69                 break;
;;;70             case SPI_MODE3:
;;;71                 config_mode = (SPI_CONFIG_CPHA_Trailing << SPI_CONFIG_CPHA_Pos) | (SPI_CONFIG_CPOL_ActiveLow << SPI_CONFIG_CPOL_Pos);
;;;72                 break;
;;;73             default:
;;;74                 config_mode = 0;
000054  2100              MOVS     r1,#0
                  |L1.86|
;;;75                 break;
;;;76         
;;;77         }
;;;78         /** @snippet [SPI Select mode] */
;;;79         /*lint -restore */
;;;80     
;;;81         /*lint -e845 -save // A zero has been given as right argument to operator '!'" */
;;;82         /** @snippet [SPI Select endianess] */
;;;83         if (lsb_first)
000056  9a02              LDR      r2,[sp,#8]
000058  2a00              CMP      r2,#0
00005a  d000              BEQ      |L1.94|
;;;84         {
;;;85             spi_base_address->CONFIG = (config_mode | (SPI_CONFIG_ORDER_LsbFirst << SPI_CONFIG_ORDER_Pos));
00005c  4321              ORRS     r1,r1,r4
                  |L1.94|
;;;86         }
;;;87         else
;;;88         {
;;;89             spi_base_address->CONFIG = (config_mode | (SPI_CONFIG_ORDER_MsbFirst << SPI_CONFIG_ORDER_Pos));
00005e  6541              STR      r1,[r0,#0x54]
;;;90         }
;;;91         /** @snippet [SPI Select endianess] */
;;;92         /*lint -restore */
;;;93     
;;;94         spi_base_address->EVENTS_READY = 0U;
000060  21ff              MOVS     r1,#0xff
000062  3109              ADDS     r1,r1,#9
000064  514e              STR      r6,[r1,r5]
;;;95     
;;;96         /* Enable */
;;;97         spi_base_address->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
000066  6004              STR      r4,[r0,#0]
;;;98     
;;;99         return (uint32_t *)spi_base_address;
000068  4628              MOV      r0,r5
;;;100    }
00006a  bdfe              POP      {r1-r7,pc}
                  |L1.108|
00006c  482b              LDR      r0,|L1.284|
00006e  4d2d              LDR      r5,|L1.292|
000070  383c              SUBS     r0,r0,#0x3c           ;23
000072  6004              STR      r4,[r0,#0]            ;23
000074  4829              LDR      r0,|L1.284|
000076  3844              SUBS     r0,r0,#0x44           ;23
000078  6004              STR      r4,[r0,#0]            ;23
00007a  1d00              ADDS     r0,r0,#4              ;23
00007c  6006              STR      r6,[r0,#0]            ;23
00007e  4827              LDR      r0,|L1.284|
000080  3838              SUBS     r0,r0,#0x38           ;23
000082  6004              STR      r4,[r0,#0]            ;23
000084  4828              LDR      r0,|L1.296|
000086  210e              MOVS     r1,#0xe               ;34
000088  6081              STR      r1,[r0,#8]            ;34
00008a  210c              MOVS     r1,#0xc               ;35
00008c  60c1              STR      r1,[r0,#0xc]          ;35
00008e  210d              MOVS     r1,#0xd               ;36
000090  6101              STR      r1,[r0,#0x10]         ;36
000092  200f              MOVS     r0,#0xf               ;37
000094  e7cf              B        |L1.54|
                  |L1.150|
000096  2102              MOVS     r1,#2                 ;65
000098  e7dd              B        |L1.86|
                  |L1.154|
00009a  2104              MOVS     r1,#4                 ;68
00009c  e7db              B        |L1.86|
                  |L1.158|
00009e  2106              MOVS     r1,#6                 ;71
0000a0  e7d9              B        |L1.86|
;;;101    
                          ENDP

                  spi_master_tx_rx PROC
;;;102    bool spi_master_tx_rx(uint32_t *spi_base_address, uint16_t transfer_size, const uint8_t *tx_data, uint8_t *rx_data)
0000a2  b5f8              PUSH     {r3-r7,lr}
;;;103    {
0000a4  4694              MOV      r12,r2
0000a6  460a              MOV      r2,r1
;;;104        uint32_t counter = 0;
0000a8  2600              MOVS     r6,#0
;;;105        uint16_t number_of_txd_bytes = 0;
;;;106        uint32_t SEL_SS_PINOUT;
;;;107        /*lint -e{826} //Are too small pointer conversion */
;;;108        NRF_SPI_Type *spi_base = (NRF_SPI_Type *)spi_base_address;
;;;109    
;;;110        if( (uint32_t *)NRF_SPI0 == spi_base_address)
0000aa  491e              LDR      r1,|L1.292|
0000ac  469e              MOV      lr,r3                 ;103
0000ae  4634              MOV      r4,r6                 ;105
0000b0  4288              CMP      r0,r1
0000b2  d101              BNE      |L1.184|
;;;111        {
;;;112            SEL_SS_PINOUT = SPI_PSELSS0;
0000b4  250f              MOVS     r5,#0xf
0000b6  e000              B        |L1.186|
                  |L1.184|
;;;113        }
;;;114        else
;;;115        {
;;;116            SEL_SS_PINOUT = SPI_PSELSS1;
0000b8  251c              MOVS     r5,#0x1c
                  |L1.186|
0000ba  2101              MOVS     r1,#1
0000bc  4f1b              LDR      r7,|L1.300|
0000be  40a9              LSLS     r1,r1,r5
0000c0  60f9              STR      r1,[r7,#0xc]
;;;117        }
;;;118    
;;;119        /* enable slave (slave select active low) */
;;;120        nrf_gpio_pin_clear(SEL_SS_PINOUT);
;;;121    
;;;122        while(number_of_txd_bytes < transfer_size)
;;;123        {
;;;124            spi_base->TXD = (uint32_t)(tx_data[number_of_txd_bytes]);
0000c2  1539              ASRS     r1,r7,#20
0000c4  1841              ADDS     r1,r0,r1
0000c6  30ff              ADDS     r0,r0,#0xff
0000c8  3001              ADDS     r0,#1
0000ca  e019              B        |L1.256|
                  |L1.204|
0000cc  4667              MOV      r7,r12
0000ce  5d3f              LDRB     r7,[r7,r4]
0000d0  61cf              STR      r7,[r1,#0x1c]
;;;125    
;;;126            /* Wait for the transaction complete or timeout (about 10ms - 20 ms) */
;;;127            while ((spi_base->EVENTS_READY == 0U) && (counter < TIMEOUT_COUNTER))
0000d2  2703              MOVS     r7,#3
0000d4  033f              LSLS     r7,r7,#12
0000d6  e000              B        |L1.218|
                  |L1.216|
0000d8  1c76              ADDS     r6,r6,#1
                  |L1.218|
0000da  6883              LDR      r3,[r0,#8]
0000dc  2b00              CMP      r3,#0
0000de  d101              BNE      |L1.228|
0000e0  42be              CMP      r6,r7
0000e2  d3f9              BCC      |L1.216|
                  |L1.228|
;;;128            {
;;;129                counter++;
;;;130            }
;;;131    
;;;132            if (counter == TIMEOUT_COUNTER)
0000e4  42be              CMP      r6,r7
0000e6  d104              BNE      |L1.242|
;;;133            {
;;;134                /* timed out, disable slave (slave select active low) and return with error */
;;;135                nrf_gpio_pin_set(SEL_SS_PINOUT);
0000e8  4628              MOV      r0,r5
0000ea  f7fffffe          BL       nrf_gpio_pin_set
;;;136                return false;
0000ee  2000              MOVS     r0,#0
;;;137            }
;;;138            else
;;;139            {   /* clear the event to be ready to receive next messages */
;;;140                spi_base->EVENTS_READY = 0U;
;;;141            }
;;;142    
;;;143            rx_data[number_of_txd_bytes] = (uint8_t)spi_base->RXD;
;;;144            number_of_txd_bytes++;
;;;145        };
;;;146    
;;;147        /* disable slave (slave select active low) */
;;;148        nrf_gpio_pin_set(SEL_SS_PINOUT);
;;;149    
;;;150        return true;
;;;151    }
0000f0  bdf8              POP      {r3-r7,pc}
                  |L1.242|
0000f2  2700              MOVS     r7,#0                 ;140
0000f4  6087              STR      r7,[r0,#8]            ;140
0000f6  698f              LDR      r7,[r1,#0x18]         ;143
0000f8  4673              MOV      r3,lr                 ;143
0000fa  551f              STRB     r7,[r3,r4]            ;143
0000fc  1c64              ADDS     r4,r4,#1              ;143
0000fe  b2a4              UXTH     r4,r4                 ;144
                  |L1.256|
000100  4294              CMP      r4,r2                 ;122
000102  d3e3              BCC      |L1.204|
000104  4628              MOV      r0,r5                 ;148
000106  f7fffffe          BL       nrf_gpio_pin_set
00010a  2001              MOVS     r0,#1                 ;150
00010c  bdf8              POP      {r3-r7,pc}
                          ENDP

                  nrf_gpio_pin_set PROC
;;;216     */
;;;217    static __INLINE void nrf_gpio_pin_set(uint32_t pin_number)
00010e  2101              MOVS     r1,#1
;;;218    {
;;;219        NRF_GPIO->OUTSET = (1UL << pin_number);
000110  4081              LSLS     r1,r1,r0
000112  4806              LDR      r0,|L1.300|
000114  6081              STR      r1,[r0,#8]
;;;220    }
000116  4770              BX       lr
;;;221    
                          ENDP

                  |L1.280|
                          DCD      0x40004000
                  |L1.284|
                          DCD      0x50000774
                  |L1.288|
                          DCD      0x40004500
                  |L1.292|
                          DCD      0x40003000
                  |L1.296|
                          DCD      0x40003500
                  |L1.300|
                          DCD      0x50000500

;*** Start embedded assembler ***

#line 1 "..\\Source\\spi_master\\spi_master.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_spi_master_c_6b526d4d____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___12_spi_master_c_6b526d4d____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_spi_master_c_6b526d4d____REVSH|
#line 144
|__asm___12_spi_master_c_6b526d4d____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___12_spi_master_c_6b526d4d__nrf_delay_us|
#line 8 "..\\Include\\nrf_delay.h"
|__asm___12_spi_master_c_6b526d4d__nrf_delay_us| PROC
#line 9

loop
 SUBS R0, R0, #1
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 BNE loop
 BX LR
	ENDP

;*** End   embedded assembler ***
