; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\ble_flash.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\ble_flash.d --feedback=.\obj\ak2_v1_1_0.fed --cpu=Cortex-M0 --apcs=interwork -O3 --diag_suppress=9931 -I..\Include -I..\user -I..\Include\app_common -I..\Include\ble -I..\Include\ble\ble_services -I..\Include\s110 -I..\Include\boards -I..\Include\sd_common -IC:\Johnson_project\2016_Project\BLE_Pedometer\Fittless_wearable\firmware_design\git-project\arm\RTE -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.6.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DNRF51 -DNRF51 -DDEBUG_NRF_USER -DSETUPA -DBOARD_AKII -DBLE_STACK_SUPPORT_REQD --omf_browse=.\obj\ble_flash.crf ..\Source\ble\ble_flash.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  ble_flash_crc16_compute PROC
;;;27     
;;;28     uint16_t ble_flash_crc16_compute(uint8_t * p_data, uint16_t size, uint16_t * p_crc)
000000  b510              PUSH     {r4,lr}
;;;29     {
000002  4604              MOV      r4,r0
;;;30         uint16_t i;
;;;31         uint16_t crc = (p_crc == NULL) ? 0xffff : *p_crc;
000004  2a00              CMP      r2,#0
000006  d002              BEQ      |L1.14|
000008  8810              LDRH     r0,[r2,#0]
                  |L1.10|
;;;32     
;;;33         for (i = 0; i < size; i++)
00000a  2200              MOVS     r2,#0
00000c  e011              B        |L1.50|
                  |L1.14|
00000e  480a              LDR      r0,|L1.56|
000010  e7fb              B        |L1.10|
                  |L1.18|
;;;34         {
;;;35             crc  = (unsigned char)(crc >> 8) | (crc << 8);
000012  0a03              LSRS     r3,r0,#8
000014  0200              LSLS     r0,r0,#8
000016  4303              ORRS     r3,r3,r0
;;;36             crc ^= p_data[i];
000018  5ca0              LDRB     r0,[r4,r2]
00001a  4058              EORS     r0,r0,r3
;;;37             crc ^= (unsigned char)(crc & 0xff) >> 4;
00001c  0603              LSLS     r3,r0,#24
00001e  0f1b              LSRS     r3,r3,#28
000020  4043              EORS     r3,r3,r0
;;;38             crc ^= (crc << 8) << 4;
000022  0318              LSLS     r0,r3,#12
000024  4058              EORS     r0,r0,r3
000026  b283              UXTH     r3,r0
;;;39             crc ^= ((crc & 0xff) << 4) << 1;
000028  0618              LSLS     r0,r3,#24
00002a  0cc0              LSRS     r0,r0,#19
00002c  4058              EORS     r0,r0,r3
00002e  1c52              ADDS     r2,r2,#1
000030  b292              UXTH     r2,r2                 ;33
                  |L1.50|
000032  428a              CMP      r2,r1                 ;33
000034  d3ed              BCC      |L1.18|
;;;40         }
;;;41         return crc;
;;;42     }
000036  bd10              POP      {r4,pc}
;;;43     
                          ENDP

                  |L1.56|
                          DCD      0x0000ffff

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  flash_page_erase PROC
;;;27     
;;;28     uint16_t ble_flash_crc16_compute(uint8_t * p_data, uint16_t size, uint16_t * p_crc)
000000  4a08              LDR      r2,|L2.36|
;;;29     {
000002  2102              MOVS     r1,#2
;;;30         uint16_t i;
;;;31         uint16_t crc = (p_crc == NULL) ? 0xffff : *p_crc;
000004  6051              STR      r1,[r2,#4]
000006  4908              LDR      r1,|L2.40|
                  |L2.8|
000008  680b              LDR      r3,[r1,#0]
;;;32     
;;;33         for (i = 0; i < size; i++)
00000a  2b00              CMP      r3,#0
00000c  d0fc              BEQ      |L2.8|
00000e  6090              STR      r0,[r2,#8]            ;31
                  |L2.16|
000010  6808              LDR      r0,[r1,#0]            ;31
;;;34         {
;;;35             crc  = (unsigned char)(crc >> 8) | (crc << 8);
000012  2800              CMP      r0,#0
000014  d0fc              BEQ      |L2.16|
000016  2000              MOVS     r0,#0
;;;36             crc ^= p_data[i];
000018  6050              STR      r0,[r2,#4]
                  |L2.26|
00001a  6808              LDR      r0,[r1,#0]
;;;37             crc ^= (unsigned char)(crc & 0xff) >> 4;
00001c  2800              CMP      r0,#0
00001e  d0fc              BEQ      |L2.26|
000020  4770              BX       lr
;;;38             crc ^= (crc << 8) << 4;
;;;39             crc ^= ((crc & 0xff) << 4) << 1;
;;;40         }
;;;41         return crc;
;;;42     }
;;;43     
                          ENDP

000022  0000              DCW      0x0000
                  |L2.36|
                          DCD      0x4001e500
                  |L2.40|
                          DCD      0x4001e400

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  flash_word_write PROC
;;;27     
;;;28     uint16_t ble_flash_crc16_compute(uint8_t * p_data, uint16_t size, uint16_t * p_crc)
000000  b570              PUSH     {r4-r6,lr}
;;;29     {
000002  460c              MOV      r4,r1
;;;30         uint16_t i;
;;;31         uint16_t crc = (p_crc == NULL) ? 0xffff : *p_crc;
000004  4605              MOV      r5,r0
000006  4e0b              LDR      r6,|L3.52|
000008  e000              B        |L3.12|
                  |L3.10|
;;;32     
;;;33         for (i = 0; i < size; i++)
00000a  df3d              SVC      #0x3d
                  |L3.12|
00000c  7830              LDRB     r0,[r6,#0]  ; m_radio_active
00000e  2800              CMP      r0,#0                 ;31
000010  d1fb              BNE      |L3.10|
;;;34         {
;;;35             crc  = (unsigned char)(crc >> 8) | (crc << 8);
000012  4809              LDR      r0,|L3.56|
000014  2101              MOVS     r1,#1
000016  6041              STR      r1,[r0,#4]
;;;36             crc ^= p_data[i];
000018  4a08              LDR      r2,|L3.60|
                  |L3.26|
00001a  6811              LDR      r1,[r2,#0]
;;;37             crc ^= (unsigned char)(crc & 0xff) >> 4;
00001c  2900              CMP      r1,#0
00001e  d0fc              BEQ      |L3.26|
000020  602c              STR      r4,[r5,#0]
                  |L3.34|
;;;38             crc ^= (crc << 8) << 4;
000022  6811              LDR      r1,[r2,#0]
000024  2900              CMP      r1,#0
000026  d0fc              BEQ      |L3.34|
;;;39             crc ^= ((crc & 0xff) << 4) << 1;
000028  2100              MOVS     r1,#0
00002a  6041              STR      r1,[r0,#4]
                  |L3.44|
00002c  6810              LDR      r0,[r2,#0]
00002e  2800              CMP      r0,#0
000030  d0fc              BEQ      |L3.44|
000032  bd70              POP      {r4-r6,pc}            ;33
;;;40         }
;;;41         return crc;
;;;42     }
;;;43     
                          ENDP

                  |L3.52|
                          DCD      ||.data||
                  |L3.56|
                          DCD      0x4001e500
                  |L3.60|
                          DCD      0x4001e400

                          AREA ||area_number.4||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.4||, ||.text||
                  ble_flash_word_write PROC
;;;27     
;;;28     uint16_t ble_flash_crc16_compute(uint8_t * p_data, uint16_t size, uint16_t * p_crc)
000000  b510              PUSH     {r4,lr}
;;;29     {
000002  f7fffffe          BL       flash_word_write
000006  2000              MOVS     r0,#0
;;;30         uint16_t i;
;;;31         uint16_t crc = (p_crc == NULL) ? 0xffff : *p_crc;
000008  bd10              POP      {r4,pc}
;;;32     
;;;33         for (i = 0; i < size; i++)
;;;34         {
;;;35             crc  = (unsigned char)(crc >> 8) | (crc << 8);
;;;36             crc ^= p_data[i];
;;;37             crc ^= (unsigned char)(crc & 0xff) >> 4;
;;;38             crc ^= (crc << 8) << 4;
;;;39             crc ^= ((crc & 0xff) << 4) << 1;
;;;40         }
;;;41         return crc;
;;;42     }
;;;43     
                          ENDP


                          AREA ||area_number.5||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.5||, ||.text||
                  ble_flash_block_write PROC
;;;27     
;;;28     uint16_t ble_flash_crc16_compute(uint8_t * p_data, uint16_t size, uint16_t * p_crc)
000000  b5f8              PUSH     {r3-r7,lr}
;;;29     {
000002  4616              MOV      r6,r2
;;;30         uint16_t i;
;;;31         uint16_t crc = (p_crc == NULL) ? 0xffff : *p_crc;
000004  460f              MOV      r7,r1
000006  4605              MOV      r5,r0                 ;29
000008  2400              MOVS     r4,#0
;;;32     
;;;33         for (i = 0; i < size; i++)
00000a  e007              B        |L5.28|
                  |L5.12|
00000c  00a0              LSLS     r0,r4,#2
00000e  5839              LDR      r1,[r7,r0]            ;31
000010  4628              MOV      r0,r5                 ;31
;;;34         {
;;;35             crc  = (unsigned char)(crc >> 8) | (crc << 8);
000012  f7fffffe          BL       flash_word_write
000016  1c64              ADDS     r4,r4,#1
;;;36             crc ^= p_data[i];
000018  b2a4              UXTH     r4,r4
00001a  1d2d              ADDS     r5,r5,#4
                  |L5.28|
;;;37             crc ^= (unsigned char)(crc & 0xff) >> 4;
00001c  42b4              CMP      r4,r6
00001e  d3f5              BCC      |L5.12|
000020  2000              MOVS     r0,#0
;;;38             crc ^= (crc << 8) << 4;
000022  bdf8              POP      {r3-r7,pc}
;;;39             crc ^= ((crc & 0xff) << 4) << 1;
;;;40         }
;;;41         return crc;
;;;42     }
;;;43     
                          ENDP


                          AREA ||area_number.6||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.6||, ||.text||
                  ble_flash_page_erase PROC
;;;27     
;;;28     uint16_t ble_flash_crc16_compute(uint8_t * p_data, uint16_t size, uint16_t * p_crc)
000000  4601              MOV      r1,r0
;;;29     {
000002  b510              PUSH     {r4,lr}
;;;30         uint16_t i;
;;;31         uint16_t crc = (p_crc == NULL) ? 0xffff : *p_crc;
000004  2001              MOVS     r0,#1
000006  0700              LSLS     r0,r0,#28             ;29
000008  6900              LDR      r0,[r0,#0x10]
;;;32     
;;;33         for (i = 0; i < size; i++)
00000a  b280              UXTH     r0,r0
00000c  4348              MULS     r0,r1,r0
00000e  f7fffffe          BL       flash_page_erase
;;;34         {
;;;35             crc  = (unsigned char)(crc >> 8) | (crc << 8);
000012  2000              MOVS     r0,#0
000014  bd10              POP      {r4,pc}
;;;36             crc ^= p_data[i];
;;;37             crc ^= (unsigned char)(crc & 0xff) >> 4;
;;;38             crc ^= (crc << 8) << 4;
;;;39             crc ^= ((crc & 0xff) << 4) << 1;
;;;40         }
;;;41         return crc;
;;;42     }
;;;43     
                          ENDP


                          AREA ||area_number.7||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.text||
                  ble_flash_page_write PROC
;;;27     
;;;28     uint16_t ble_flash_crc16_compute(uint8_t * p_data, uint16_t size, uint16_t * p_crc)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;29     {
000002  2101              MOVS     r1,#1
;;;30         uint16_t i;
;;;31         uint16_t crc = (p_crc == NULL) ? 0xffff : *p_crc;
000004  0709              LSLS     r1,r1,#28
000006  6909              LDR      r1,[r1,#0x10]         ;29
000008  4616              MOV      r6,r2
;;;32     
;;;33         for (i = 0; i < size; i++)
00000a  b28f              UXTH     r7,r1
00000c  4347              MULS     r7,r0,r7
00000e  0091              LSLS     r1,r2,#2              ;31
000010  463c              MOV      r4,r7                 ;31
;;;34         {
;;;35             crc  = (unsigned char)(crc >> 8) | (crc << 8);
000012  2200              MOVS     r2,#0
000014  9801              LDR      r0,[sp,#4]
000016  f7fffffe          BL       ble_flash_crc16_compute
;;;36             crc ^= p_data[i];
00001a  4605              MOV      r5,r0
;;;37             crc ^= (unsigned char)(crc & 0xff) >> 4;
00001c  8820              LDRH     r0,[r4,#0]
00001e  b281              UXTH     r1,r0
000020  42a9              CMP      r1,r5
;;;38             crc ^= (crc << 8) << 4;
000022  d101              BNE      |L7.40|
                  |L7.36|
000024  2000              MOVS     r0,#0
000026  bdfe              POP      {r1-r7,pc}
                  |L7.40|
;;;39             crc ^= ((crc & 0xff) << 4) << 1;
000028  4638              MOV      r0,r7
00002a  f7fffffe          BL       flash_page_erase
00002e  2000              MOVS     r0,#0
000030  3408              ADDS     r4,r4,#8              ;33
000032  e015              B        |L7.96|
                  |L7.52|
000034  9901              LDR      r1,[sp,#4]            ;33
;;;40         }
;;;41         return crc;
;;;42     }
000036  0082              LSLS     r2,r0,#2
000038  588a              LDR      r2,[r1,r2]
00003a  4b0f              LDR      r3,|L7.120|
00003c  2101              MOVS     r1,#1
00003e  6059              STR      r1,[r3,#4]
000040  490e              LDR      r1,|L7.124|
                  |L7.66|
000042  680b              LDR      r3,[r1,#0]
000044  2b00              CMP      r3,#0
000046  d0fc              BEQ      |L7.66|
000048  6022              STR      r2,[r4,#0]
                  |L7.74|
00004a  680a              LDR      r2,[r1,#0]
00004c  2a00              CMP      r2,#0
00004e  d0fc              BEQ      |L7.74|
000050  4b09              LDR      r3,|L7.120|
000052  2200              MOVS     r2,#0
000054  605a              STR      r2,[r3,#4]
                  |L7.86|
000056  680a              LDR      r2,[r1,#0]
000058  2a00              CMP      r2,#0
00005a  d0fc              BEQ      |L7.86|
00005c  1c40              ADDS     r0,r0,#1
00005e  1d24              ADDS     r4,r4,#4
                  |L7.96|
000060  42b0              CMP      r0,r6
000062  dbe7              BLT      |L7.52|
000064  4631              MOV      r1,r6
000066  1d38              ADDS     r0,r7,#4
000068  f7fffffe          BL       flash_word_write
00006c  4804              LDR      r0,|L7.128|
00006e  1829              ADDS     r1,r5,r0
000070  4638              MOV      r0,r7
000072  f7fffffe          BL       flash_word_write
000076  e7d5              B        |L7.36|
;;;43     
                          ENDP

                  |L7.120|
                          DCD      0x4001e500
                  |L7.124|
                          DCD      0x4001e400
                  |L7.128|
                          DCD      0x45de0000

                          AREA ||area_number.8||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.text||
                  ble_flash_page_read PROC
;;;27     
;;;28     uint16_t ble_flash_crc16_compute(uint8_t * p_data, uint16_t size, uint16_t * p_crc)
000000  b5f8              PUSH     {r3-r7,lr}
;;;29     {
000002  460f              MOV      r7,r1
;;;30         uint16_t i;
;;;31         uint16_t crc = (p_crc == NULL) ? 0xffff : *p_crc;
000004  2101              MOVS     r1,#1
000006  0709              LSLS     r1,r1,#28             ;29
000008  6909              LDR      r1,[r1,#0x10]
;;;32     
;;;33         for (i = 0; i < size; i++)
00000a  4614              MOV      r4,r2
00000c  b289              UXTH     r1,r1
00000e  4341              MULS     r1,r0,r1              ;31
000010  680d              LDR      r5,[r1,#0]            ;31
;;;34         {
;;;35             crc  = (unsigned char)(crc >> 8) | (crc << 8);
000012  4e0e              LDR      r6,|L8.76|
000014  0c28              LSRS     r0,r5,#16
000016  0400              LSLS     r0,r0,#16
;;;36             crc ^= p_data[i];
000018  42b0              CMP      r0,r6
00001a  d002              BEQ      |L8.34|
;;;37             crc ^= (unsigned char)(crc & 0xff) >> 4;
00001c  2000              MOVS     r0,#0
00001e  7010              STRB     r0,[r2,#0]
000020  e00f              B        |L8.66|
                  |L8.34|
;;;38             crc ^= (crc << 8) << 4;
000022  7908              LDRB     r0,[r1,#4]
000024  7020              STRB     r0,[r4,#0]
000026  0082              LSLS     r2,r0,#2
;;;39             crc ^= ((crc & 0xff) << 4) << 1;
000028  4638              MOV      r0,r7
00002a  3108              ADDS     r1,r1,#8
00002c  f7fffffe          BL       __aeabi_memcpy4
000030  7820              LDRB     r0,[r4,#0]            ;33
000032  2200              MOVS     r2,#0                 ;33
000034  0081              LSLS     r1,r0,#2              ;33
;;;40         }
;;;41         return crc;
;;;42     }
000036  4638              MOV      r0,r7
000038  f7fffffe          BL       ble_flash_crc16_compute
00003c  1980              ADDS     r0,r0,r6
00003e  42a8              CMP      r0,r5
000040  d001              BEQ      |L8.70|
                  |L8.66|
000042  2005              MOVS     r0,#5
000044  bdf8              POP      {r3-r7,pc}
                  |L8.70|
000046  2000              MOVS     r0,#0
000048  bdf8              POP      {r3-r7,pc}
;;;43     
                          ENDP

00004a  0000              DCW      0x0000
                  |L8.76|
                          DCD      0x45de0000

                          AREA ||area_number.9||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.9||, ||.text||
                  ble_flash_page_addr PROC
;;;27     
;;;28     uint16_t ble_flash_crc16_compute(uint8_t * p_data, uint16_t size, uint16_t * p_crc)
000000  2201              MOVS     r2,#1
;;;29     {
000002  0712              LSLS     r2,r2,#28
;;;30         uint16_t i;
;;;31         uint16_t crc = (p_crc == NULL) ? 0xffff : *p_crc;
000004  6912              LDR      r2,[r2,#0x10]
000006  b292              UXTH     r2,r2                 ;29
000008  4342              MULS     r2,r0,r2
;;;32     
;;;33         for (i = 0; i < size; i++)
00000a  2000              MOVS     r0,#0
00000c  600a              STR      r2,[r1,#0]
00000e  4770              BX       lr                    ;31
;;;34         {
;;;35             crc  = (unsigned char)(crc >> 8) | (crc << 8);
;;;36             crc ^= p_data[i];
;;;37             crc ^= (unsigned char)(crc & 0xff) >> 4;
;;;38             crc ^= (crc << 8) << 4;
;;;39             crc ^= ((crc & 0xff) << 4) << 1;
;;;40         }
;;;41         return crc;
;;;42     }
;;;43     
                          ENDP


                          AREA ||area_number.10||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.text||
                  ble_flash_on_radio_active_evt PROC
;;;27     
;;;28     uint16_t ble_flash_crc16_compute(uint8_t * p_data, uint16_t size, uint16_t * p_crc)
000000  4901              LDR      r1,|L10.8|
;;;29     {
000002  7008              STRB     r0,[r1,#0]
;;;30         uint16_t i;
;;;31         uint16_t crc = (p_crc == NULL) ? 0xffff : *p_crc;
000004  4770              BX       lr
;;;32     
;;;33         for (i = 0; i < size; i++)
;;;34         {
;;;35             crc  = (unsigned char)(crc >> 8) | (crc << 8);
;;;36             crc ^= p_data[i];
;;;37             crc ^= (unsigned char)(crc & 0xff) >> 4;
;;;38             crc ^= (crc << 8) << 4;
;;;39             crc ^= ((crc & 0xff) << 4) << 1;
;;;40         }
;;;41         return crc;
;;;42     }
;;;43     
                          ENDP

000006  0000              DCW      0x0000
                  |L10.8|
                          DCD      ||.data||

                          AREA ||.data||, DATA, ALIGN=0

                  m_radio_active
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\Source\\ble\\ble_flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_ble_flash_c_0294ac3c____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_ble_flash_c_0294ac3c____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_ble_flash_c_0294ac3c____REVSH|
#line 144
|__asm___11_ble_flash_c_0294ac3c____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
